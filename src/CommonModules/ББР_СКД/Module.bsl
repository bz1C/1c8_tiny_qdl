// Библиотека "быстрой" разработки на платформе 1С:Предприятие 8
// Модуль ББР_СКД. Версия 1.6 от 19.04.2019
// Назначение: Содержит функции для работы с системой компоновки данных.
// Автор: Чернуль Александр Владимирович. E-mail: bzero@yandex.ru
// Лицензия на использование: Freeware.
// Зависимости: ББР_КоллекцииКлиентСервер


Функция ПолучитьМакетКомпоновки(Макет, знач Настройки, ВыводитьРезультатВКоллекциюЗначений = Ложь, ДанныеРасшифровки = Неопределено) Экспорт 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = Настройки.ПолучитьНастройки(); // теперь тип - НастройкиКомпоновкиДанных. 
	КонецЕсли;
	
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(
		Макет, 
		Настройки, 
		ДанныеРасшифровки,, 
		Тип(?(ВыводитьРезультатВКоллекциюЗначений = Истина, "ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений", "ГенераторМакетаКомпоновкиДанных"))
	);
	Возврат МакетКомпоновки; 
КонецФункции 

// Функция - Устанавливает значение параметра СКД для обычной/пользовательской настройки
//
// Параметры:
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных	- Настройки СКД
//  ИмяПараметра - Строка	- Имя параметра для установки
//  Значение	 - Произвольный	- значение для установки
//  Вариант		 - Число	- 1 - установить значение параметра СКД, 2 - установить значение пользовательской настройки параметра СКД, 3 - установить значение параметра и пользовательской настройки СКД. 0 - не устанавливать значение, а просто проверить наличие параметра. Если в параметре КомпоновщикНастроек указано значение типа НастройкиКомпоновкиДанных, то значение параметра Вариант игнорируется и всегда считается равным 1.
// 
// Возвращаемое значение:
//  Булево, Неопределено - Истина	- искомый параметр найден, Ложь - не найден. Неопределено - переметр КомпоновщикНастроек имеет неправильный тип.
//
Функция УстановитьЗначенияПараметра(КомпоновщикНастроек, ИмяПараметра, Значение, знач Вариант=1) Экспорт
	Если ТипЗнч(КомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Вариант = 1;
		Настройки = КомпоновщикНастроек;
	ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = КомпоновщикНастроек.Настройки;
	Иначе
		Возврат Неопределено; 
	КонецЕсли;
	
	НайденныйПараметрКД = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если НайденныйПараметрКД = Неопределено Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	Если ПроверитьБит(Вариант,0) Тогда
		НайденныйПараметрКД.Использование = Истина;
		НайденныйПараметрКД.Значение = Значение;
	КонецЕсли; 
	
	Если ПроверитьБит(Вариант,1) Тогда
		Если ЗначениеЗаполнено(НайденныйПараметрКД.ИдентификаторПользовательскойНастройки) Тогда
			ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(НайденныйПараметрКД.ИдентификаторПользовательскойНастройки);
			Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПользовательскийПараметр.Значение = Значение;
				ПользовательскийПараметр.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Истина; 

КонецФункции

Функция ПолучитьЗначенияПараметра(Настройки, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт
	НайденныйПараметрКД = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если НайденныйПараметрКД = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию; 
	КонецЕсли;
	
	Если НайденныйПараметрКД.Использование = Ложь Тогда
		Возврат ЗначениеПоУмолчанию; 
	КонецЕсли; 
	
	Возврат НайденныйПараметрКД.Значение; 
КонецФункции

Функция ВыполнитьВКоллекциюЗначений(МакетКомпоновки, ВыводитьВДерево, ИспользоватьВнешниеФункции = Ложь, ДанныеРасшифровки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт  
	//ВнешниеНаборыДанных = Новый Структура("Остатки, Движения", тзОстатки, тзДвижения);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, ИспользоватьВнешниеФункции);
	
	Если ВыводитьВДерево = Истина Тогда
		Результат = Новый ДеревоЗначений;
	Иначе
		Результат = Новый ТаблицаЗначений;
	КонецЕсли; 
	
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	//ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	Возврат Результат; 
КонецФункции
 
Процедура ВыполнитьСВыводомВТабДокумент(ТабДокумент, МакетКомпоновки, ИспользоватьВнешниеФункции = Ложь, ДанныеРасшифровки = Неопределено, ВнешниеНаборыДанных = Неопределено, ОтображатьПроцентВывода = Ложь) Экспорт  
	//ВнешниеНаборыДанных = Новый Структура("Остатки, Движения", тзОстатки, тзДвижения);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, ИспользоватьВнешниеФункции);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода = ОтображатьПроцентВывода;
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
КонецПроцедуры 

Процедура УстановитьЗаголовокОтчета(Настройки, ТекстЗаголовка = Неопределено, Выводить = Неопределено) Экспорт
	ТипНастройки = ТипЗнч(Настройки);
	Если ТипНастройки = Тип("ЗначенияПараметровВыводаКомпоновкиДанных") Тогда
		ПараметрыВывода = Настройки;
	ИначеЕсли ТипНастройки = Тип("НастройкиКомпоновкиДанных") 
			или ТипНастройки = Тип("ТаблицаКомпоновкиДанных") 
			или ТипНастройки = Тип("ГруппировкаКомпоновкиДанных") 
			или ТипНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
			или ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") 
			или ТипНастройки = Тип("ВложеннаяСхемаКомпоновкиДанных")
			или ТипНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	Тогда
		ПараметрыВывода = Настройки.ПараметрыВывода;
	Иначе
		Возврат; 
	КонецЕсли;
	
	ПараметрЗаголовок = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Если ПараметрЗаголовок <> Неопределено Тогда
		ПараметрЗаголовок.Значение = ?(ТекстЗаголовка = Неопределено, "", ТекстЗаголовка);
		ПараметрЗаголовок.Использование = ТекстЗаголовка <> Неопределено;
	КонецЕсли;
	
	ПараметрВыводить = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ПараметрВыводить <> Неопределено Тогда
		Если Выводить = Истина Тогда
			ПараметрВыводить.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		ИначеЕсли Выводить = Ложь Тогда 
			ПараметрВыводить.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Иначе
			ПараметрВыводить.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
		КонецЕсли; 
		ПараметрВыводить.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьУсловиеОтбора(знач КоллекцияЭлементовОтбора, ИмяПоля, ВидСравнения, Значение, Использование = Истина) Экспорт
	Если ТипЗнч(КоллекцияЭлементовОтбора) = Тип("ОтборКомпоновкиДанных") Тогда
		КоллекцияЭлементовОтбора = КоллекцияЭлементовОтбора.Элементы;
	КонецЕсли; 
	ЭлементОтбора = КоллекцияЭлементовОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование = Использование;
КонецФункции

 Функция НайтиУсловноеОформление(НастройкиДляДоработки, НазваниеПредставления) Экспорт
	Для каждого УО Из НастройкиДляДоработки.УсловноеОформление.Элементы Цикл
		Если УО.Представление = НазваниеПредставления Тогда
			Возврат УО; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено; 
КонецФункции


Функция НайтиЭлементыУсловногоОформления(НастройкиДляДоработки, НазваниеПредставления, Результат = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
	КонецЕсли; 
	
	Для каждого УО Из НастройкиДляДоработки.УсловноеОформление.Элементы Цикл
		Если УО.Представление = НазваниеПредставления Тогда
			Результат.Добавить(УО); 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат; 
КонецФункции
 

Процедура ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(знач КоллекцияЭлементовСтруктуры, знач НазваниеПредставления, знач УчитыватьКолонкиТаблиц, Результат)
	
	Для каждого элСтрукт Из КоллекцияЭлементовСтруктуры Цикл
		НайтиЭлементыУсловногоОформления(элСтрукт, НазваниеПредставления, Результат);
		
		ТипЭлемента = ТипЗнч(элСтрукт);
		Если ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(элСтрукт.Строки, НазваниеПредставления, УчитыватьКолонкиТаблиц, Результат);
			
			Если УчитыватьКолонкиТаблиц = Истина Тогда
				ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(элСтрукт.Колонки, НазваниеПредставления, УчитыватьКолонкиТаблиц, Результат);
			КонецЕсли; 
		ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда 	
			ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(элСтрукт.Серии, НазваниеПредставления, УчитыватьКолонкиТаблиц, Результат);
			ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(элСтрукт.Точки, НазваниеПредставления, УчитыватьКолонкиТаблиц, Результат);
		ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
				или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
				или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		Тогда
			ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(элСтрукт.Структура, НазваниеПредставления, УчитыватьКолонкиТаблиц, Результат);
		КонецЕсли;
		
	КонецЦикла; 
КонецПроцедуры
	
Функция НайтиЭлементыУсловногоОформленияРекурсивно(НастройкиДляДоработки, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции = Неопределено) Экспорт
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = Новый Массив;
	КонецЕсли; 
	
	ТипЭлемента = ТипЗнч(НастройкиДляДоработки);
	ТекущийЭлементИмеетУО = (ТипЭлемента <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") и ТипЭлемента <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"));
	
	Если ТекущийЭлементИмеетУО Тогда
		НайтиЭлементыУсловногоОформления(НастройкиДляДоработки, НазваниеПредставления, РезультатФункции);
	КонецЕсли; 	
	
	Если ТипЭлемента = Тип("НастройкиКомпоновкиДанных") Тогда
		ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(НастройкиДляДоработки.Структура, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции);
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
		ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(НастройкиДляДоработки.Строки, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции);
		
		Если УчитыватьКолонкиТаблиц = Истина Тогда
			ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(НастройкиДляДоработки.Колонки, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции);
		КонецЕсли; 
	ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда 	
		ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(НастройкиДляДоработки.Серии, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции);
		ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(НастройкиДляДоработки.Точки, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции);
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
			или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
			или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	Тогда
		ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(НастройкиДляДоработки.Структура, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции);
	Иначе
		ПолучитьЭлементыУсловногоОформленияРекурсивноВнутр(НастройкиДляДоработки, НазваниеПредставления, УчитыватьКолонкиТаблиц, РезультатФункции);
	КонецЕсли;
	
	Возврат РезультатФункции; 	
КонецФункции
Функция НайтиИспользованиеПолейЛюбоеИз(Настройки, МассивИменПолей, РекурсивныйПоиск = Истина, ЗначениеФильтраПризнакаИспользование = Истина, ИскатьВПолях = Истина,
			ИскатьВОтборах = Истина, ИскатьВПорядке = Истина, ИскатьВГруппировках = Истина) Экспорт 

	МассивПолей = Новый Массив;
	Для каждого ИмяПоля Из МассивИменПолей Цикл
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоля));
	КонецЦикла; 
	
	ПараметрыОбработчика = Новый Структура(
		"МассивПолей, РекурсивныйПоиск, ЗначениеФильтраПризнакаИспользование, ИскатьВПолях, ИскатьВОтборах, ИскатьВПорядке, ИскатьВГруппировках",
		МассивПолей,
		РекурсивныйПоиск,
		ЗначениеФильтраПризнакаИспользование,
		ИскатьВПолях,
		ИскатьВОтборах,
		ИскатьВПорядке,
		ИскатьВГруппировках
	);
	
	ПараметрыОбработчика.Вставить("УчитыватьКолонкиТаблиц", Истина);
	ПараметрыОбработчика.Вставить("УчитыватьСерииДиаграмм", Истина);
	ПараметрыОбработчика.Вставить("УчитыватьТочкиДиаграмм", Истина);
	
	Результат = Новый Структура;
	ВыполнитьОбходСКДРекурсивно(Настройки, "_СКД_ОбработчикРекурсивногоОбхода_НайтиИспользованиеПолейЛюбоеИз", ПараметрыОбработчика, Результат);
	
	Возврат ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(Результат, "Результат", Ложь);
			
КонецФункции


Процедура ВыполнитьОбходСКДРекурсивно(Настройки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов) Экспорт
	ТипЭлемента = ТипЗнч(Настройки);
	
	ЕстьПризнакИспользования = ТипЭлемента <> Тип("НастройкиКомпоновкиДанных");
	
	//обрабатываем текущий элемент
	ЗначениеФильтраПризнакаИспользование = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ПараметрыОбработчика,"ЗначениеФильтраПризнакаИспользование");
	
	Если ЕстьПризнакИспользования и ЗначениеФильтраПризнакаИспользование <> Неопределено и ЗначениеФильтраПризнакаИспользование <> Настройки.Использование Тогда
		Возврат; 
	КонецЕсли; 
	
	ВызватьОбработчик(ИмяОбработчикаРекурсивногоПоиска, Настройки, ПараметрыОбработчика, РезультатВызовов);
	
	Если не ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ПараметрыОбработчика, "РекурсивныйПоиск", Ложь) или ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(РезультатВызовов, "ПрерватьВыполнение", Ложь) Тогда
		Возврат; 
	КонецЕсли; 
	
	
	//спускаемся рекурсивно по коллекции
	Если ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда 
		ВыполнитьОбходКоллекцииСКДРекурсивно(Настройки.Строки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
		
		Если ПараметрыОбработчика.УчитыватьКолонкиТаблиц = Истина Тогда
			ВыполнитьОбходКоллекцииСКДРекурсивно(Настройки.Колонки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
		КонецЕсли; 
	ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если ПараметрыОбработчика.УчитыватьСерииДиаграмм Тогда
			ВыполнитьОбходКоллекцииСКДРекурсивно(Настройки.Серии, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
		КонецЕсли;
		Если ПараметрыОбработчика.УчитыватьТочкиДиаграмм Тогда
			ВыполнитьОбходКоллекцииСКДРекурсивно(Настройки.Точки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
		КонецЕсли;
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
			или ТипЭлемента = Тип("НастройкиКомпоновкиДанных")
			или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
			или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	Тогда
		ВыполнитьОбходКоллекцииСКДРекурсивно(Настройки.Структура, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
	Иначе
		ВыполнитьОбходКоллекцииСКДРекурсивно(Настройки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбходКоллекцииСКДРекурсивно(знач КоллекцияЭлементовСтруктуры, знач ИмяОбработчикаРекурсивногоПоиска, знач ПараметрыОбработчика, РезультатВызовов)
	ЗначениеФильтраПризнакаИспользование = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ПараметрыОбработчика,"ЗначениеФильтраПризнакаИспользование");
	Для каждого элСтрукт Из КоллекцияЭлементовСтруктуры Цикл
		Если ЗначениеФильтраПризнакаИспользование <> Неопределено и ЗначениеФильтраПризнакаИспользование <> элСтрукт.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		ВызватьОбработчик(ИмяОбработчикаРекурсивногоПоиска, элСтрукт, ПараметрыОбработчика, РезультатВызовов);
		
		Если ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(РезультатВызовов, "ПрерватьВыполнение", Ложь) Тогда
			Возврат; 
		КонецЕсли;
		
		Если ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ПараметрыОбработчика, "РекурсивныйПоиск", Ложь) Тогда
			ТипЭлемента = ТипЗнч(элСтрукт);
			Если ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
				ВыполнитьОбходКоллекцииСКДРекурсивно(элСтрукт.Строки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
				
				Если ПараметрыОбработчика.УчитыватьКолонкиТаблиц = Истина Тогда
					ВыполнитьОбходКоллекцииСКДРекурсивно(элСтрукт.Колонки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
				КонецЕсли; 
			ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда 	
				Если ПараметрыОбработчика.УчитыватьСерииДиаграмм Тогда
					ВыполнитьОбходКоллекцииСКДРекурсивно(элСтрукт.Серии, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
				КонецЕсли;
				
				Если ПараметрыОбработчика.УчитыватьТочкиДиаграмм Тогда
					ВыполнитьОбходКоллекцииСКДРекурсивно(элСтрукт.Точки, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
				КонецЕсли;
			ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
					или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
					или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			Тогда
				ВыполнитьОбходКоллекцииСКДРекурсивно(элСтрукт.Структура, ИмяОбработчикаРекурсивногоПоиска, ПараметрыОбработчика, РезультатВызовов);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 	
КонецПроцедуры


Процедура ВызватьОбработчик(ИмяОбработчикаРекурсивногоПоиска, Узел, Параметры, Результат)
	Выполнить(ИмяОбработчикаРекурсивногоПоиска+"(Узел, Параметры, Результат);");
КонецПроцедуры
 

Процедура _СКД_ОбработчикРекурсивногоОбхода_НайтиИспользованиеПолейЛюбоеИз(Узел, ВходныеПараметры, РезультатВызовов)
	ТипЭлемента = ТипЗнч(Узел);
	МассивПолей = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ВходныеПараметры, "МассивПолей");
	ИскатьВПолях = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ВходныеПараметры, "ИскатьВПолях");
	ИскатьВОтборах = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ВходныеПараметры, "ИскатьВОтборах");
	ИскатьВПорядке = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ВходныеПараметры, "ИскатьВПорядке");
	ИскатьВГруппировках = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ВходныеПараметры, "ИскатьВГруппировках");
	
	Если ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") или ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
		ОтборСортировкаДоступны = Ложь;
		ЭтоГруппировка = Ложь;
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда 
		ОтборСортировкаДоступны = Истина;
		ЭтоГруппировка = Истина;
	Иначе
		ОтборСортировкаДоступны = Истина;
		ЭтоГруппировка = Ложь;
	КонецЕсли; 
	
	ЗначениеФильтраПризнакаИспользование = ББР_КоллекцииКлиентСервер.СвойствоСтруктуры(ВходныеПараметры,"ЗначениеФильтраПризнакаИспользование");
	
	Итерации = Новый Массив;
	Если ИскатьВПолях  Тогда
		Итерации.Добавить(Узел.Выбор);
	КонецЕсли; 
	Если ИскатьВОтборах и ОтборСортировкаДоступны Тогда
		Итерации.Добавить(Узел.Отбор);
	КонецЕсли; 
	Если ИскатьВПорядке и ОтборСортировкаДоступны Тогда
		Итерации.Добавить(Узел.Порядок);
	КонецЕсли;
	Если ЭтоГруппировка и ИскатьВГруппировках Тогда
		Итерации.Добавить(Узел.ПоляГруппировки);
	КонецЕсли; 
	
	сч=0;
	МасПоляДляПроверки = Новый Массив;
	ТипПолеКомпоновкиЛанных = Тип("ПолеКомпоновкиДанных");
	Пока Итерации.Количество() > сч Цикл
		МасПоляДляПроверки.Очистить();
		
		Для каждого Элемент Из Итерации[сч].Элементы Цикл
			Если ЗначениеФильтраПризнакаИспользование <> Неопределено и ЗначениеФильтраПризнакаИспользование <> Элемент.Использование Тогда
				Продолжить;
			КонецЕсли; 
			ТипЭлемента = ТипЗнч(Элемент);
			Если ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				МасПоляДляПроверки.Добавить(Элемент.Поле);
				
			ИначеЕсли ТипЭлемента = Тип("ПолеГруппировкиКомпоновкиДанных")  Тогда 
				МасПоляДляПроверки.Добавить(Элемент.Поле);
				
			ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") 
				или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			Тогда
			
				Итерации.Добавить(Элемент);
			ИначеЕсли ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				МасПоляДляПроверки.Добавить(Элемент.ЛевоеЗначение);
				Если ТипЗнч(Элемент.ПравоеЗначение) = ТипПолеКомпоновкиЛанных Тогда
					МасПоляДляПроверки.Добавить(Элемент.ПравоеЗначение);
				КонецЕсли; 
			ИначеЕсли ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
				МасПоляДляПроверки.Добавить(Элемент.Поле);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ПроверяемоеПоле Из МасПоляДляПроверки Цикл
			Если МассивПолей.Найти(ПроверяемоеПоле) <> Неопределено Тогда
				// нашли поле
				РезультатВызовов.Вставить("ПрерватьВыполнение", Истина);
				РезультатВызовов.Вставить("Результат", Истина);
				Возврат; 
			КонецЕсли; 
		КонецЦикла; 
		
		сч = сч + 1;
	КонецЦикла; 
	
	РезультатВызовов.Вставить("Результат", Ложь);
КонецПроцедуры
