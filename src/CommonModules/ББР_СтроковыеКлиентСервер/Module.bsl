// Библиотека "быстрой" разработки на платформе 1С:Предприятие 8
// Модуль ББР_СтроковыеКлиентСервер. Версия 1.3 от 22.04.2021
// Назначение: Содержит функции для работы со строками.
// Автор: Чернуль Александр Владимирович. E-mail: bzero@yandex.ru
// Лицензия на использование: Freeware.


#Область КлассификацияСимволов

// Возвращает Истина, если Симв - русская буква (строчная или заглавная)
// Ложь, если Симв не является русской буквой.
Функция ЭтоКодРусскойБуквы(знач КодСимв) Экспорт
	Если КодСимв = 1025 или КодСимв = 1105 Тогда //Ё или ё
		Возврат Истина; 
	ИначеЕсли КодСимв >= 1040 и КодСимв <= 1103 Тогда 
		Возврат Истина; 
	Иначе
		Возврат Ложь; 
	КонецЕсли;
КонецФункции

// Возвращает Истина, если Симв - английская (латинская) буква (строчная или заглавная)
// Ложь, если Симв не является латинской буквой.
Функция ЭтоКодАнглийскойБуквы(знач КодСимв) Экспорт
	Если КодСимв >= 97 и КодСимв <= 122 Тогда
		Возврат Истина; 
	ИначеЕсли КодСимв >= 65 и КодСимв <= 90 Тогда 
		Возврат Истина; 
	Иначе
		Возврат Ложь; 
	КонецЕсли;
КонецФункции

// Возвращает Истина, если Симв - цифра (от 0 до 9)
// Ложь, если Симв не является цифрой.
Функция ЭтоКодЦифры(знач КодСимв) Экспорт
	//КодСимв = КодСимвола(Симв);
	Если КодСимв >= 48 и КодСимв <= 57 Тогда
		Возврат Истина; 
	Иначе
		Возврат Ложь; 
	КонецЕсли;
КонецФункции

//BOM - 65279
Функция ЭтоКодСимволаBOM(знач КодСимв) Экспорт
	Возврат КодСимв = 65279; 
КонецФункции


//Незначащие символы:
//ВК (CR) - 10
//ВТаб (VTab) 
//НПП (NBSp)
//ПС (LF) - 13
//ПФ (FF)
//Таб (Tab) 
// пробел (32)
Функция ЭтоКодНезначащегоСимвола(знач КодСимв) Экспорт
	Возврат КодСимв >= 9 и КодСимв <= 13 или КодСимв = 20 или КодСимв = 32 или КодСимв = 160;
КонецФункции

#КонецОбласти

#Область ПреобразованиеКоллекцийВСтроку
// Преобразует структуру Структ в строку. Если Структура состоит представляет собой
//		[Идент1] => [Значение1],
//		[Идент2] => [Значение2],
//			...
//		[ИдентN] => ЗначениеN
//	 То результатом будет 
//		Для режима 1 - строка [Идент1][РазделительЭлементов][Идент2][РазделительЭлементов]...[ИдентN]
//		Для режима 2 - строка [Значение1][РазделительЭлементов][Значение2][РазделительЭлементов]...[ЗначениеN]
//		Для режима 3 - строка [Идент1][РазделительКлючЗначение][Значение1][РазделительЭлементов][Идент2][РазделительКлючЗначение][Значение2][РазделительЭлементов]...[ИдентN][РазделительКлючЗначение][ЗначениеN]
//ПАРАМЕТРЫ
//	Структ:Структура. Входящий. Преобразуемая в строку структура.
//	РазделительКлючЗначение:Строка. Входящий. Строка-разделитель между ключом и значением элемента структуры
//	РазделительЭлементов:Строка. Входящий. Строка-разделитель между элементами структуры. Перед первым и после последнего элемента не ставится.
//  Режим:Число. Входящий. По умолчанию 3.
//		Режим работы ф-ии. 1 - формировать строку из ключей, 2 - формировать строку из значений, 3 - формировать строку из ключей и значений.
//ВОЗВРАЩАЕТ
//	Строка.
Функция СформироватьСтрокуИзСтруктуры(Структ, Режим, РазделительЭлементов=",", РазделительКлючЗначение="=") Экспорт
	результат = "";
	Если Режим = 1 Тогда // только ключи
		Для каждого эл Из Структ Цикл
			результат = результат + РазделительЭлементов+эл.Ключ;
		КонецЦикла;
	ИначеЕсли Режим = 2 Тогда // только значения
		Для каждого эл Из Структ Цикл
			результат = результат + РазделительЭлементов+эл.Значение;
		КонецЦикла;
	Иначе //3 - ключи и значения
		Для каждого эл Из Структ Цикл
			результат = результат + РазделительЭлементов+эл.Ключ+РазделительКлючЗначение+эл.Значение;
		КонецЦикла;
	КонецЕсли;
	Возврат  Сред(результат,СтрДлина(РазделительЭлементов)+1);
КонецФункции

// Преобразует массив Структ в строку. Если массив представляет собой
//		[Значение1],
//		[Значение2],
//			...
//		ЗначениеN
//	 То результатом будет 
//		[Значение1][РазделительЭлементов][Значение2][РазделительЭлементов]...[ЗначениеN]
//ПАРАМЕТРЫ
//	Структ:Массив. Входящий. Преобразуемая в строку структура.
//	РазделительЭлементов:Строка. Входящий. Строка-разделитель между элементами. Перед первым и после последнего элемента не ставится.
//ВОЗВРАЩАЕТ
//	Строка.
Функция СформироватьСтрокуИзМассива(Структ, РазделительЭлементов=",") Экспорт
	результат = "";
	Для каждого эл Из Структ Цикл
		результат = результат + РазделительЭлементов+эл;
	КонецЦикла;
	Возврат  Сред(результат,СтрДлина(РазделительЭлементов)+1);
КонецФункции
	
#КонецОбласти 

#Область РаботаСоСтроками

Функция СтрНачинаетсяС_БезУчетаРегистра(Стр, НачалоСтр) Экспорт
	Возврат СтрНачинаетсяС(Врег(Стр), Врег(НачалоСтр)); 
КонецФункции

// Функция - Удаляет из строки ИсходнаяСтрока КолСимволов символов справа 
//
// Параметры:
//  ИсходнаяСтрока	 - Строка - исходная строка, из которой будут удаляться символы справа
//  КолСимволов		 - Число - количество символов, которые нужно удалить. Если 0 или отрицательное число, возвращается исходная строка.
//		Если КолСимволов больше длины исходной строки, возвращается пустая строка.
// 
// Возвращаемое значение:
//  Строка - строка, полученная из ИсходнаяСтрока удалением КолСимволов справа. 
//		Если КолСимволов <= 0, возвращается исходная строка.
//		Если КолСимволов больше длины исходной строки, возвращается пустая строка
//
Функция СтрУдалитьКонец(знач ИсходнаяСтрока, знач КолСимволов) Экспорт
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Если КолСимволов >= ДлинаСтроки Тогда
		Возврат ""; 
	ИначеЕсли КолСимволов <= 0 Тогда 
		Возврат ИсходнаяСтрока; 
	КонецЕсли; 
	Возврат Лев(ИсходнаяСтрока, ДлинаСтроки - КолСимволов); 
КонецФункции

Функция СтрУдалитьНачало(знач ИсходнаяСтрока, знач КолСимволов) Экспорт
	Возврат Сред(ИсходнаяСтрока, КолСимволов+1); 
КонецФункции

Функция СтрПодстрокаДоРазделителя(ИсходнаяСтрока, знач Разделитель) Экспорт 
	поз = СтрНайти(ИсходнаяСтрока, Разделитель);
	Если поз = 0 Тогда
		Возврат ИсходнаяСтрока;
	Иначе
		Возврат Лев(ИсходнаяСтрока, поз-1); 
	КонецЕсли; 
КонецФункции
 
// Функция - возвращает часть строки, следующую после <НомерРазделителя>-го разделителя <Разделитель> до конца строки
//
// Параметры:
//  ИсходнаяСтрока	 - Строка - исходная строка.
//  Разделитель		 - Строка - разделитель для поиска.
//  НомерРазделителя - Число - Необязательный. После какого по счету разделителя возвращять остаток строки. По умолчанию 1.
// 
// Возвращаемое значение:
//  Строка - подстрока после <НомерРазделителя>-го разделителя <Разделитель> и до конца строки. Не включает разделитель. 
//		Если требуемый разделитель отсутствует, возвращает пустуя строку.
//
Функция СтрПодстрокаПослеРазделителя(ИсходнаяСтрока, знач Разделитель, знач НомерРазделителя = 1) Экспорт 
	поз = СтрНайти(ИсходнаяСтрока, Разделитель, НаправлениеПоиска.СНачала, 1, НомерРазделителя);
	Если поз = 0 Тогда
		Возврат "";
	Иначе
		Возврат Сред(ИсходнаяСтрока, поз+1); 
	КонецЕсли; 
КонецФункции

// Функция - возвращает часть строки, следующую после <НомерРазделителя>-го разделителя <Разделитель> до конца строки
//
// Параметры:
//  ИсходнаяСтрока	 - Строка - исходная строка.
//  Разделитель		 - Строка - разделитель для поиска.
//  НомерРазделителя - Число - Необязательный. После какого по счету разделителя возвращять остаток строки. По умолчанию 1.
// 
// Возвращаемое значение:
//  Строка - подстрока после <НомерРазделителя>-го разделителя <Разделитель> и до конца строки. Не включает разделитель. 
//		Если требуемый разделитель отсутствует, возвращает пустуя строку.
//
Функция СтрПодстрокаМеждуРазделителями(знач ИсходнаяСтрока, знач Разделитель, знач НомерЧасти) Экспорт
	//1.2.3.4.5
	поз = СтрНайти(ИсходнаяСтрока, Разделитель, НаправлениеПоиска.СНачала, 1, НомерЧасти);
	Если НомерЧасти = 1 Тогда
		Если поз = 0 Тогда
			Возврат ИсходнаяСтрока;
		Иначе
			Возврат Лев(ИсходнаяСтрока, поз-1); 
		КонецЕсли;
	Иначе //НомерЧасти > 1
		Если поз <> 0 Тогда
			поз_1 = СтрНайти(ИсходнаяСтрока, Разделитель, НаправлениеПоиска.СКонца, поз, 1);
		Иначе
			поз_1 = СтрНайти(ИсходнаяСтрока, Разделитель, НаправлениеПоиска.СНачала, 1, НомерЧасти-1);
		КонецЕсли; 
		
		Если поз_1 = 0 Тогда
			Возврат "";
		ИначеЕсли поз = 0 Тогда
			Возврат Сред(ИсходнаяСтрока, поз_1+1);
		Иначе
			Возврат СтрПодстрока(ИсходнаяСтрока, поз_1+1, поз-1);  
		КонецЕсли; 
	КонецЕсли; 
КонецФункции

Функция СтрПодстрока(знач ИсходнаяСтрока, знач поз1, знач поз2) Экспорт
	Если поз1 < 1 Тогда
		поз1 = 1;
	КонецЕсли;
	дл = СтрДлина(ИсходнаяСтрока);
	Если поз2 > дл Тогда
		поз2 = дл;
	КонецЕсли; 
	Возврат Сред(ИсходнаяСтрока, поз1, поз2-поз1+1); 
КонецФункции
 
// Функция - Разделяет строку на части по указанным символам-разделителям
//
// Параметры:
//  Стр								 - Строка - Разделяемая строка.
//  Разделители						 - Строка - Строка символов, каждый из которых является индивидуальным разделителем. 
//  ВключатьРазделителиВРезультат	 - Булево - 
//  ВключатьПустые					 - Булево - Указывает необходимость включать в результат пустые строки, которые могут образоваться в результате разделения исходной строки. Если ВключатьРазделителиВРезультат = Истина, то пустые строки включаются независимо от значения данного параметра.
// 
// Возвращаемое значение:
//  Массив - Массив, содержащий части, на которые разбита строка стр. Если ВключатьРазделителиВРезультат = Истина, то четные элементы массива содержат разделители.
//
Функция РазбитьСтроку(знач Стр, знач Разделители, знач ВключатьРазделителиВРезультат = Истина, знач ВключатьПустые = Истина) Экспорт
	ТекущаяСтрока = Стр;
	ДлРазделителей = СтрДлина(Разделители);
	Разделитель = Лев(Разделители,1);
	Для сч=2 По ДлРазделителей Цикл
		ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, Сред(Разделители,сч,1), Разделитель);
	КонецЦикла;
	НачПоз = 1;
	поз = 0;
	Результат = Новый Массив;
	ДлСтроки = СтрДлина(Стр);
	
	Пока НачПоз <= ДлСтроки Цикл
		поз = СтрНайти(ТекущаяСтрока, Разделитель,, НачПоз);
		Если поз = 0 Тогда
			Прервать;
		КонецЕсли; 
		
		ЧастьСтрокиДоРазделителя = Сред(стр, НачПоз, поз-НачПоз);
		Если ВключатьРазделителиВРезультат <> Истина и ВключатьПустые = Ложь и ПустаяСтрока(ЧастьСтрокиДоРазделителя) Тогда
			НачПоз = поз+1;
			Продолжить;
		КонецЕсли;
		Результат.Добавить(ЧастьСтрокиДоРазделителя);
		Если ВключатьРазделителиВРезультат = Истина Тогда
			Результат.Добавить(Сред(стр, поз, 1));
		КонецЕсли;
		НачПоз = поз+1;
	КонецЦикла;
	
	Если поз = 0 Тогда
		Результат.Добавить(Сред(стр, НачПоз));
	КонецЕсли; 
	
	Возврат Результат; 
КонецФункции

Функция НормализоватьСтроку(стр, НормализуемыеСимволы, КонечныйРазделитель) Экспорт 
	КускиСтроки = СтрРазделить(стр, НормализуемыеСимволы, Ложь); 
	Возврат СтрСоединить(КускиСтроки, КонечныйРазделитель);
КонецФункции

#КонецОбласти 

#Область ПреобразованиеИзСтроки


// Преобразует значение типа Строка в число. Параметр стр должен являться строковым представлением литерала численного типа.
// При этом строковое представление анализируется как с учетом региональных установок информационной базы, так и без их учета.
// Параметр типа Булево преобразуется в число по следующим правилам: Ложь преобразуется в 0; Истина преобразуется в 1.
//
// Параметры:
//  стр					 - Строка - строковое представление числа или значения типа Булево.
//  игнорируемыеСимволы	 - Строка - символы, которые перечислены в данной строке будут игнорироваться при преобразовании
//									независимо от того, в каком месте строки стр и в каком количестве они встретились.
//  ЗначениеПоУмолчанию	 - Произвольный - значение, которое возвращается в случае ошибки. Если указать значение "!ВызватьИсключение",
//									в случае ошибки преобразования будет вызвано исколючение.
// 
// Возвращаемое значение:
//  Число, ЗначениеПоУмолчанию - результат преобразования или ЗначениеПоУмолчанию, если при преобразовании произошла ошибка
//
Функция ЧислоИзСтроки(знач стр, знач игнорируемыеСимволы="", ЗначениеПоУмолчанию = Неопределено) Экспорт
	стрП = стр;
	Если игнорируемыеСимволы <>  "" Тогда
		Для сч=1 По СтрДлина(игнорируемыеСимволы) Цикл
			стрП = СтрЗаменить(стрП, Сред(игнорируемыеСимволы, сч,1), "");
		КонецЦикла;
	КонецЕсли; 
	
	Попытка
		Результат = Число(стр);
	Исключение
		Если ЗначениеПоУмолчанию="!ВызватьИсключение" Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Ошибка преобразования значения ""%1"" к числу.'"), стр);
		Иначе
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецПопытки; 
	Возврат Результат; 
КонецФункции
 
Функция ДатаВремяИзСтроки1С(знач стрДатаВремя) Экспорт 
	Результат = Неопределено;
	Если ТипЗнч(стрДатаВремя) = Тип("Строка") Тогда
		Попытка
			Результат = Дата(стрДатаВремя);
		Исключение
		КонецПопытки; 
	КонецЕсли; 
	Возврат Результат; 
КонецФункции

// Функция - Преобразует строковое представление даты (со временем и без него) дату из строки
//
// Параметры:
//  стр					 - Строка - Дата в строковой форме. Может содержать или не содержать время.
//  ИсключениеПриОшибке	 - Булево - Если Истина, то при ошибке выдается исключение. Если Ложь, то при ошибке исключение не выдается, а функция возвращает Неопределено.
//  порядокДМГ			 - Булево - Если Истина, то формат даты - День,Месяц,Год, а если Ложь, то Год, Месяц, День.
//  разделителиДаты		 - Строка - Список символов, которыми разделяются части даты.
//  разделителиДатаВремя - Строка - Список символов, которыми разделяется дата и время, если оно есть.
//  разделителиВремени	 - Строка - Список символов, которыми разделяются часы, минуты и секунды, если они есть.
// 
// Возвращаемое значение:
// Дата, Неопределено  - результат преобразования строкового представления даты (и времени, если оно есть) в дату. Если ИсключениеПриОшибке = Ложь и преобразование завершается ошибкой, то Неопределено.
//
Функция ДатаИзСтроки(знач парСтр, ИсключениеПриОшибке, знач порядокДМГ = Неопределено, знач разделителиДаты = "/.-", знач разделителиДатаВремя = " T", знач разделителиВремени = ":") Экспорт
	Ошибка = Ложь;
	стр = парСтр;
	Если ПорядокДМГ = Неопределено Тогда
		стр = СокрЛ(стр);
		Если СтрНайти(разделителиДаты,Сред(стр,5,1)) <> 0 Тогда
			порядокДМГ = Ложь;
			Для сч=1 По 4 Цикл
				Если не ББР_СтроковыеКлиентСервер.ЭтоКодЦифры(КодСимвола(стр, сч)) Тогда
					порядокДМГ = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			ПорядокДМГ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	для режим = 1 По 3 Цикл
		Если режим = 1 Тогда
			МасДата = СтрРазделить(стр, разделителиДаты,Истина);
			Если МасДата.Количество() < 3 Тогда
				Ошибка = Истина;
				Прервать;
			КонецЕсли;
			
			СтрД1 = МасДата[0];
			СтрД2 = МасДата[1];
			
			//МасДата.Удалить(0);	
			//МасДата.Удалить(0);
			//стр = МасДата[0]; 	
		ИначеЕсли режим = 2 Тогда
			стр = СокрЛ(Сред(стр, СтрДлина(СтрД1)+СтрДлина(СтрД2)+3));
			МасДатаВремя = СтрРазделить(стр, разделителиДатаВремя,Истина);
			Если МасДатаВремя.Количество() <= 1 Тогда
				СтрД3 = стр;
				Прервать;
			Иначе
				СтрД3 = МасДатаВремя[0];
			КонецЕсли;
			
			
		ИначеЕсли режим = 3 Тогда 
			стр = СокрЛП(Сред(стр, СтрДлина(СтрД3)+2));
			Если ПустаяСтрока(стр) Тогда
				Прервать;
			КонецЕсли;
			МасВремя = СтрРазделить(стр, разделителиВремени,Истина);
			Кол = МасВремя.Количество();
			Если Кол < 2 или Кол > 3 Тогда
				Ошибка = Истина;
				Прервать;
			КонецЕсли;
			СтрЧЧ = МасВремя[0];
			СтрММ = МасВремя[1];
			Если Кол = 3 Тогда
				СтрСС = МасВремя[2];
			Иначе
				СтрСС = "0";
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
		
	Если Ошибка = Ложь Тогда
		мГод = Неопределено;
		мМесяц = Неопределено;
		мДень = Неопределено;
		ЧЧ = 0;
		ММ = 0;
		СС = 0;
			
		СтрМ = СтрД2;
		Если порядокДМГ = Ложь Тогда
			СтрД = СтрД3;
			СтрГ = СтрД1;
		Иначе
			СтрД = СтрД1;
			СтрГ = СтрД3;
		КонецЕсли;
			
		Попытка
			мГод = Число(стрГ);
			мМесяц = Число(стрМ);
			мДень = Число(стрД);
			Если режим >= 3 Тогда
				ЧЧ = Число(СтрЧЧ);
				ММ = Число(СтрММ);
				СС = Число(стрСС);
			КонецЕсли;
		Исключение
			Ошибка = ИнформацияОбОшибке(); 				
		КонецПопытки;
	КонецЕсли;		
			 
	Если Ошибка = Ложь Тогда
		Если мГод >= 0 и мГод < 100 Тогда
			ТекушийГод = Год(ТекущаяДата());
			Столетие = Цел(ТекушийГод/100)*100;
			ГодПредел = (ТекушийГод - 50)%100;
			Если мГод > ГодПредел Тогда
				мГод = Столетие - 100 + мГод;
			Иначе
				мГод = Столетие + мГод;
			КонецЕсли; 				    
		КонецЕсли;
		Попытка
			Возврат Дата(мГод, мМесяц, мДень, ЧЧ, ММ, СС);
		Исключение
			Ошибка = ИнформацияОбОшибке();
		КонецПопытки;
	КонецЕсли;
			
	Если Ошибка <> Ложь Тогда
		Если ИсключениеПриОшибке = Истина Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Ошибка преобразования строки ""%1"" в дату.'"), парСтр);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти 
