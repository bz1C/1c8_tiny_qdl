// Библиотека "быстрой" разработки на платформе 1С:Предприятие 8
// Модуль ББР_РаботаСWordКлиентСервер. Версия 2.0 от 02.05.2024
// Назначение: Содержит методы для работы с Microsoft Word
// Зависимости: нет.
// Автор: Чернуль Александр Владимирович. E-mail: bzero@yandex.ru
// Лицензия на использование: Freeware (при указании автора разработки).




#Область ПрограммныйИнтерфейс

// Вставляет форматированный документ 1С в Word при помощи промежуточного преобразования в HTML
// 
// Параметры:
//  Range - COMОбъект - область документа Word (Word.Range), в которую вставляется содержимое форматированного документа
//  ФорматированныйДокумент - ФорматированныйДокумент - форматированный документ, содержимое которого вставляется 
Процедура ВывестиФорматированныйДокументВWord(Range, ФорматированныйДокумент) Экспорт 
	
	ТекстHTML = "";
	Картинки = Новый Структура;
	Счетчик = 0;
	
	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл 
		Для каждого Элемент Из Параграф.Элементы Цикл 
			Если ТипЗнч(Элемент) = Тип("КартинкаФорматированногоДокумента") Тогда 
				Счетчик = Счетчик + 1;
				Картинки.Вставить(СтрШаблон("image%1", Формат(Счетчик, "ЧЦ=3; ЧВН=")), Элемент.Картинка);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;        
	
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);    
	
	Для Каждого Картинка Из Картинки Цикл 
		Значение = Base64Строка(Картинка.Значение.ПолучитьДвоичныеДанные());
		ТекстHTML = СтрЗаменить(ТекстHTML, Картинка.Ключ, "data:image/png;base64," + Значение);
	КонецЦикла;
	
	ТекстHTMLФайл= ПолучитьИмяВременногоФайла("html");
    ЗаписьТекста = новый ЗаписьТекста(ТекстHTMLФайл);
    ЗаписьТекста.Записать(ТекстHTML);
    ЗаписьТекста.Закрыть();
	
	Range.InsertFile(ТекстHTMLФайл, , , False, False);
		
КонецПроцедуры

// Вставляет форматированный документ 1С в Word.
// 
// Параметры:
//  DstRange - COMОбъект - область документа Word (Word.Range), в которую вставляется содержимое форматированного документа
//  ФорматирДокумент - ФорматированныйДокумент - форматированный документ, содержимое которого вставляется 
//  ДопПараметры - Структура см. ББР_РаботаСWordКлиентСервер.ПреобразоватьОформлениеТекста, Неопределено - Если Неопределено, доп. параметры не передаются. 
//  Структура позволяет задать опции переноса текста. 
Процедура ВставитьФорматированныйДокументВВорд(DstRange, ФорматирДокумент, ДопПараметры = Неопределено) Экспорт
	DstRange.Text = "";
	ПервыйАбзац = Истина;
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура();
	КонецЕсли;
	ВставитьФорматированныйДокументВВордРекурсивно(DstRange.Document, DstRange.Start, ФорматирДокумент.Элементы, ПервыйАбзац, ДопПараметры);
КонецПроцедуры

// Устанавливает значение существующего свойства документа
// Возвращает Истина, если свойство найдено и оно установлено, Ложь, если свойство не найдено.
Функция УстановитьСвойствоДокумента(знач Doc, знач ИмяСвойства, знач ЗначениеСвойства) Экспорт 
   	property = Doc.CustomDocumentProperties(ИмяСвойства);
	Если property = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	property.Value = ЗначениеСвойства;
	Возврат Истина;
КонецФункции

Процедура ПреобразоватьКартинкиФорматируемогоДокументаВСериализуемыйФормат(форматирДокумент) Экспорт 
	ПреобразоватьКартинкиФорматируемогоДокументаВСериализуемыйФорматРекурсивно(форматирДокумент.Элементы);
КонецПроцедуры

// Обновляет поля документа
Процедура ОбновитьПоляДокумента(знач Doc) Экспорт 
	Doc.Fields.Update();
КонецПроцедуры

// Процедура - Вставдяет перекрестную ссылку в область документа Word.
//
// Параметры:
//  ОбластьЯчейки		- Range - Область Word, в которую вставляем ссылку.
//  ReferenceType		- Число	 - Тип элемента, для которого вставляется перекрестная ссылка. Может быть любой константой WdReferenceType или WdCaptionLabelID или меткой заголовка, определенной пользователем.
// 		2 - wdRefTypeBookmark - закладка, 1- wdRefTypeHeading Заголовок, 0 - wdRefTypeNumberedItem - Нумерованный элемент)
//  ReferenceKind		- Число	- Сведения, которые должны быть включены в перекрестную ссылку. 
//  	wdContentText=–1 - Вставка текстового значения указанного элемента. Например, вставьте текст указанного заголовка.
//		wdEndnoteNumber=6	Вставка ссылочной метки концевых сносок.
//		wdEndnoteNumberFormatted=17	Вставка отформатированного знака концевой сноски.
//		wdEntireCaption=2	Вставьте метку, число и любой дополнительный заголовок указанного уравнения, рисунка или таблицы.
//		wdFootnoteNumber=5	Вставьте ссылочный знак сноски.
//		wdFootnoteNumberFormatted=16	Вставка отформатированного ссылочного знака сноски.
//		wdNumberFullContext=-4	Вставьте полный заголовок или номер абзаца.
//		wdNumberNoContext=–3	Вставка заголовка или абзаца без его относительного положения в нумерованном списке структуры.
//		wdNumberRelativeContext=–2	Вставьте заголовок или абзац с таким же относительным положением в нумерованном списке структуры, как это необходимо для идентификации элемента.
//		wdOnlyCaptionText=4	Вставьте только текст заголовка указанного уравнения, рисунка или таблицы.
//		wdOnlyLabelAndNumber=3	Вставьте только метку и номер указанного уравнения, рисунка или таблицы.
//		wdPageNumber=7	Вставить номер страницы указанного элемента.
//		wdPosition=15	Вставьте слово "Выше" или "Внизу" соответствующим образом.
//  ReferenceItem	 - Число, Строка - Если referenceType имеет значение wdRefTypeBookmark, этот аргумент указывает имя закладки. Для всех остальных значений ReferenceType этот аргумент указывает номер или имя элемента в параметре Тип ссылки в диалоговом окне Перекрестная ссылка . Используйте метод GetCrossReferenceItems , чтобы вернуть список имен элементов, которые можно использовать с этим аргументом.
//  InsertAsHyperlink	 - 	Булево - Значение true , чтобы вставить перекрестную ссылку в качестве гиперссылки на элемент, на который указывает ссылка.
//  IncludePosition		 - Булево	 - Значение true для вставки "выше" или "ниже" в зависимости от расположения ссылочного элемента по отношению к перекрестной ссылке.
//  SeparateNumbers		 - Булево	 - Значение true , чтобы использовать разделитель для отделения чисел от связанного текста. (Используйте, только если параметр ReferenceType имеет значение wdRefTypeNumberedItem , а параметр ReferenceKind — wdNumberFullContext.)
//  SeparatorString		 - Строка	 - Указывает строку, используемую в качестве разделителя, если параметр SeparateNumbers имеет значение True.
//
Процедура ВставитьПерекрестнуюСсылку(знач ОбластьЯчейки, знач ReferenceType, знач ReferenceKind, знач ReferenceItem, знач InsertAsHyperlink = Ложь, знач IncludePosition = Ложь, SeparateNumbers = Ложь, SeparatorString=" ") Экспорт
	// ReferenceKind:
	//		wdContentText	–1	Вставка текстового значения указанного элемента. Например, вставьте текст указанного заголовка.
	//		wdEndnoteNumber	6	Вставка ссылочной метки концевых сносок.
	//		wdEndnoteNumberFormatted	17	Вставка отформатированного знака концевой сноски.
	//		wdEntireCaption	2	Вставьте метку, число и любой дополнительный заголовок указанного уравнения, рисунка или таблицы.
	//		wdFootnoteNumber	5	Вставьте ссылочный знак сноски.
	//		wdFootnoteNumberFormatted	16	Вставка отформатированного ссылочного знака сноски.
	//		wdNumberFullContext	-4	Вставьте полный заголовок или номер абзаца.
	//		wdNumberNoContext	–3	Вставка заголовка или абзаца без его относительного положения в нумерованном списке структуры.
	//		wdNumberRelativeContext	–2	Вставьте заголовок или абзац с таким же относительным положением в нумерованном списке структуры, как это необходимо для идентификации элемента.
	//		wdOnlyCaptionText	4	Вставьте только текст заголовка указанного уравнения, рисунка или таблицы.
	//		wdOnlyLabelAndNumber	3	Вставьте только метку и номер указанного уравнения, рисунка или таблицы.
	//		wdPageNumber	7	Вставить номер страницы указанного элемента.
	//		wdPosition	15	Вставьте слово "Выше" или "Внизу" соответствующим образом.

	ОбластьЯчейки.InsertCrossReference(
		ReferenceType, //Тип элемента, для которого вставляется перекрестная ссылка. Может быть любой константой WdReferenceType или WdCaptionLabelID или меткой заголовка, определенной пользователем.
		ReferenceKind, //Сведения, которые должны быть включены в перекрестную ссылку.
		ReferenceItem, //Если referenceType имеет значение wdRefTypeBookmark, этот аргумент указывает имя закладки. Для всех остальных значений ReferenceType этот аргумент указывает номер или имя элемента в параметре Тип ссылки в диалоговом окне Перекрестная ссылка . Используйте метод GetCrossReferenceItems , чтобы вернуть список имен элементов, которые можно использовать с этим аргументом.
		InsertAsHyperlink, //Значение true , чтобы вставить перекрестную ссылку в качестве гиперссылки на элемент, на который указывает ссылка.
		IncludePosition//, //Значение true для вставки "выше" или "ниже" в зависимости от расположения ссылочного элемента по отношению к перекрестной ссылке.
//		SeparateNumbers, //Значение true , чтобы использовать разделитель для отделения чисел от связанного текста. (Используйте, только если параметр ReferenceType имеет значение wdRefTypeNumberedItem , а параметр ReferenceKind — wdNumberFullContext.)
//		SeparatorString //Указывает строку, используемую в качестве разделителя, если параметр SeparateNumbers имеет значение True.
	);
КонецПроцедуры

Процедура ПреобразоватьОформлениеТекста(dstRange, знач пШрифт, знач ЦветТекста = Неопределено, знач ЦветФона = Неопределено, ДопПараметры) Экспорт
	ш = пШрифт.ПолучитьАбсолютный();
	fnt = dstRange.Font;
	
	fnt.Bold = ш.Полужирный;
	fnt.Italic = ш.Наклонный;
	fnt.StrikeThrough = ш.Зачеркивание;
	fnt.Underline = ш.Подчеркивание;
	fnt.Scaling  = ш.Масштаб;
	Если не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры,"ИгнорироватьИмяШрифта", Ложь) Тогда
		fnt.Name = ш.Имя;		
	КонецЕсли;
	Если не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры,"ИгнорироватьРазмерШрифта", Ложь) Тогда
		fnt.Size = ш.Размер;
	КонецЕсли;
	Если ЦветТекста <> Неопределено Тогда
		цт = ЦветТекста.ПолучитьАбсолютный();
		цтРГБ = RGB2Int(цт.Красный, цт.Зеленый, цт.Синий);
		fnt.TextColor.RGB = цтРГБ;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено и не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры,"ИгнорироватьЦветФона", Ложь) Тогда
		Если ЦветФона.Вид = ВидЦвета.АвтоЦвет и ЦветТекста <> Неопределено Тогда
			цфРГБ = ПобитовоеИ(ПобитовоеНе(цтРГБ), 16777215); //16777215 = 0xFFFFFF
		Иначе
			цф = ЦветФона.ПолучитьАбсолютный();
			цфРГБ = RGB2Int(цф.Красный, цф.Зеленый, цф.Синий);
		КонецЕсли;
		dstRange.Shading.BackgroundPatternColor = цфРГБ;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьОбластьПоИмениЗакладки(Doc, ИмяЗакладки) Экспорт
	bm = Doc.Bookmarks(ИмяЗакладки);
	Если bm = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат bm.Range();
КонецФункции

Функция ДобавитьЗакладку(знач Doc, знач ИмяЗакладки, знач ОбластьВставки) Экспорт
	bm = Doc.Bookmarks.Add(
		ИмяЗакладки, //Name
 		ОбластьВставки //Range
	);
	Возврат bm;
КонецФункции

Функция ПреобразоватьВГиперссылку(знач Doc, знач ОбъектОбласть, знач СсылкаИмяФайла, знач ИмяЗакладкиДиапазона, знач ТекстСсылки = Неопределено, знач ВсплывающаяПодсказка = Неопределено) Экспорт
	Target = Неопределено;
	hl = doc.HyperLinks.Add(
		ОбъектОбласть, //Текст или рисунок, которые вы хотите превратить в гиперссылку
		СсылкаИмяФайла, //Адрес указанной ссылки. Адрес может быть адресом электронной почты, интернет-адресом или именем файла. Обратите внимание, что Microsoft Word не проверяет точность адреса
		ИмяЗакладкиДиапазона, //Имя расположения в целевом файле, например закладка, именованный диапазон или номер слайда.
		ВсплывающаяПодсказка,  //Текст, который отображается в виде подсказки экрана, когда указатель мыши расположен над указанной гиперссылкой. Значение по умолчанию — Address. 
		ТекстСсылки, //Отображаемый текст указанной гиперссылки. Значение этого аргумента заменяет текст или рисунок, заданный привязкой.
		Target // Имя фрейма или окна, в которое требуется загрузить указанную гиперссылку.
	);
	Возврат hl;
КонецФункции

#Область РаботаСОбъектами1С

Функция ЗакладкаПоУИД(знач Префикс, знач Ссыль) Экспорт 
	Возврат Префикс + СтрЗаменить(Строка(Ссыль.УникальныйИдентификатор()), "-", "");
КонецФункции


#КонецОбласти

#Область РаботаСОбластями


// Процедура - Сдвинуть конец области
//
// Параметры:
//  ЕдиницаСдвига			 - Число - 1-Символ, 2 - слово, 3 - предложение, 4 - абзац, 5 - строка, 6 - история, 7 - экран, 8 - раздел, 9 - столбец, 10 - строка, 11 - Окно, 12 - ячейка,...
//  КоличествоЕдиницВправо	 - Число - Положительное число сдвигает вправо, отрицательное - влево на заданное число единиц 
//
Процедура СдвинутьКонецОбласти(знач Область, знач ЕдиницаСдвига, знач КоличествоЕдиницВправо) Экспорт
	//wdCell				12	Ячейка.
	//wdCharacter			1	Символ.
	//wdCharacterFormatting	13	Форматирование символов.
	//wdColumn				9	Столбец.
	//wdItem				16	Выбранный элемент.
	//wdLine				5	Строка.
	//wdParagraph			4	Абзац.
	//wdParagraphFormatting	14	Форматирование абзаца.
	//wdRow					10	Строка.
	//wdScreen				7	Размеры экрана.
	//wdSection				8	Раздел.
	//wdSentence			3	Предложение.
	//wdStory				6	История.
	//wdTable				15	Таблица.
	//wdWindow				11	Окно.
	//wdWord				2	Слово.
	
	Область.MoveEnd(ЕдиницаСдвига, КоличествоЕдиницВправо);
КонецПроцедуры                                                                         


Процедура СхлопнутьОбласть(знач Область, знач СхлопнутьВправо) Экспорт
	Область.Collapse(?(СхлопнутьВправо, 0, 1));
КонецПроцедуры



#КонецОбласти

#Область РаботаСТаблицей

Процедура ДобавитьОжидаемуюКолонкуТаблицыВМассив(МасОжидаемыхКолонок, знач ТекстКолонки, знач ИмяКолонки, знач РежимСовпадения, знач Обязательная = Ложь) Экспорт
	ОжидаемаяКолонка = Новый Структура("ТекстКолонки, ИмяКолонки, НомерКолонки, РежимСовпадения, Обязательная", 
		НРег(СтрСоединить(СтрРазделить(ТекстКолонки, " "+Символы.ВК+Символы.ПС+Символы.Таб+Символы.ВТаб+Символы.НПП+Символы.ПФ+Символ(7), Ложь), " ")), 
		ИмяКолонки,
		Неопределено,
		ВРег(СокрЛП(РежимСовпадения)), 
		Обязательная
	);
	МасОжидаемыхКолонок.Добавить(ОжидаемаяКолонка);
КонецПроцедуры

Функция ПолучитьСтруктуруКолонок(Таблица, знач МасОжидаемыхКолонок, знач НомерСтрокиЗаголовка = 1) Экспорт
	СтруктураКолонок = Новый Структура();
	НомерКолонки = 1;
	Для каждого cell Из Таблица.Rows(НомерСтрокиЗаголовка).Cells Цикл
		ТекстЯчейки = cell.Range().Text;
		ТекстЯчейки = СтрСоединить(СтрРазделить(ТекстЯчейки, " "+Символы.ВК+Символы.ПС+Символы.Таб+Символы.ВТаб+Символы.НПП+Символы.ПФ+Символ(7), Ложь), " ");
		ТекстЯчейки = НРег(ТекстЯчейки);
		
		Совпадение = Ложь;
		Для каждого ОжидаемаяКолонка Из МасОжидаемыхКолонок Цикл
			Если ОжидаемаяКолонка.РежимСовпадения = "=" или ПустаяСтрока(ОжидаемаяКолонка.РежимСовпадения) Тогда
				Если ТекстЯчейки = ОжидаемаяКолонка.ТекстКолонки Тогда
					Совпадение = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли ОжидаемаяКолонка.РежимСовпадения = "=*" Тогда
				Если СтрНачинаетсяС(ТекстЯчейки,ОжидаемаяКолонка.ТекстКолонки) Тогда
					Совпадение = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли ОжидаемаяКолонка.РежимСовпадения = "*=*" Тогда
				Если СтрНайти(ТекстЯчейки,ОжидаемаяКолонка.ТекстКолонки) <> 0 Тогда
					Совпадение = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Совпадение Тогда
			ОжидаемаяКолонка.НомерКолонки = НомерКолонки;			
			СтруктураКолонок.Вставить(ОжидаемаяКолонка.ИмяКолонки, НомерКолонки);
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Для каждого ОжидаемаяКолонка Из МасОжидаемыхКолонок Цикл
		Если ОжидаемаяКолонка.Обязательная и ОжидаемаяКолонка.НомерКолонки = Неопределено Тогда
			ВызватьИсключение(
				СтрШаблон(НСтр("ru='Не найдена обязательная колонка ""%1"" в строке %2 заголовка таблицы.'"), ОжидаемаяКолонка.ТекстКолонки, НомерСтрокиЗаголовка),
				КатегорияОшибки.ИсключениеВызванноеИзВстроенногоЯзыка,
				"WORD_TABLE_COLUMN_NOT_FOUND",
				ОжидаемаяКолонка.ТекстКолонки
			);
		КонецЕсли;
	КонецЦикла;
		
	Возврат СтруктураКолонок;	
	
КонецФункции

Функция ДобавитьСтрокуТаблицы(знач Таблица) Экспорт 
	Возврат Таблица.Rows.Add();
КонецФункции


Функция ЯчейкаСтрокиТаблицы(знач СтрокаТаблицы, знач СтруктураКолонок, знач ИмяКолонки, знач ВыдаватьИсключениеПриОтсутствииКолонки = Истина) Экспорт
	НомерКолонки = Неопределено;
	Если ТипЗнч(ИмяКолонки) <> Тип("Строка") или не СтруктураКолонок.Свойство(ИмяКолонки, НомерКолонки) Тогда
		Если ВыдаватьИсключениеПриОтсутствииКолонки Тогда
			ВызватьИсключение(
				СтрШаблон(НСтр("ru='Колонка с именем ""%1"" отсутствует в структуре таблицы.'"), ИмяКолонки),
				КатегорияОшибки.ИсключениеВызванноеИзВстроенногоЯзыка,
				"WORD_TABLE_COLUMN_NAME_NOT_FOUND_IN_DESCRIPTOR",
				ИмяКолонки
			);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Cells(НомерКолонки);
КонецФункции

Функция ОбластьЯчейкиСтрокиТаблицы(знач СтрокаТаблицы, знач СтруктураКолонок, знач ИмяКолонки, знач ВыдаватьИсключениеПриОтсутствииКолонки = Истина) Экспорт
	Ячейка = ЯчейкаСтрокиТаблицы(СтрокаТаблицы, СтруктураКолонок, ИмяКолонки,ВыдаватьИсключениеПриОтсутствииКолонки);
	Если Ячейка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;              
	
	Возврат Ячейка.Range();
КонецФункции


#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

	Функция ПолучитьРасширениеКартинки(Картинка, знач РасширениеПоУмолчанию="") Экспорт
		Если ТипЗнч(Картинка) = Тип("Картинка") Тогда
			ФорматК = Картинка.Формат;
			Если ФорматК = ФорматКартинки.BMP Тогда
				Возврат "bmp";
			ИначеЕсли ФорматК = ФорматКартинки.EMF Тогда
				Возврат "emf";
			ИначеЕсли ФорматК = ФорматКартинки.GIF Тогда
				Возврат "gif";
			ИначеЕсли ФорматК = ФорматКартинки.JPEG Тогда
				Возврат "jpg";
			ИначеЕсли ФорматК = ФорматКартинки.PNG Тогда
				Возврат "png";
			ИначеЕсли ФорматК = ФорматКартинки.TIFF Тогда
				Возврат "tif";
			ИначеЕсли ФорматК = ФорматКартинки.SVG Тогда
				Возврат "svg";
			ИначеЕсли ФорматК = ФорматКартинки.WMF Тогда
				Возврат "wmf";
			ИначеЕсли ФорматК = ФорматКартинки.Icon Тогда
				Возврат "ico";
			ИначеЕсли ФорматК = ФорматКартинки.НеизвестныйФормат Тогда
				Возврат РасширениеПоУмолчанию;
			Иначе
				Возврат РасширениеПоУмолчанию;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Картинка) = Тип("Строка") и СтрНачинаетсяС(Картинка, "data:image/") Тогда
			позЗапятой = СтрНайти(Картинка, ",", НаправлениеПоиска.СНачала, 12);
			Если позЗапятой > 0 Тогда
				СтрФормат = Сред(Картинка, 12, позЗапятой-12);
				МасФормат = СтрРазделить(СтрФормат, ";");
				Если МасФормат.Количество() <> 2 Тогда
					Возврат РасширениеПоУмолчанию;
				КонецЕсли;
				Если МасФормат[1] <> "base64" Тогда
					Возврат РасширениеПоУмолчанию;
				КонецЕсли;
				Формат = НРег(СокрЛП(МасФормат[0]));
				Если Формат = "jpeg" Тогда
					Возврат "jpg";
				Иначе
					Возврат Формат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат РасширениеПоУмолчанию;
	КонецФункции

	Функция ПреобразоватьКартинкуИзОбъектаВоВнедренныйВСтрокуФормат(знач парКартинка) Экспорт
		Если ТипЗнч(парКартинка) <> Тип("Картинка") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = парКартинка.ПолучитьДвоичныеДанные(Ложь);
			
		Если Данные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;								
		
		ДанныеБ64 = Base64Строка(Данные);
		ДанныеБ64 = СтрЗаменить(ДанныеБ64,Символы.ПС, "");
		ДанныеБ64 = СтрЗаменить(ДанныеБ64,Символы.ВК, "");
		
		Результат = "data:image/"+ИнтернетТипКартинки(парКартинка.Формат())+";base64,"+ДанныеБ64;
		
		Возврат Результат;
	КонецФункции

	Функция RGB2Int(знач Красный, знач Зеленый, знач Синий) Экспорт
		Возврат Красный + ПобитовыйСдвигВлево(Зеленый, 8) + ПобитовыйСдвигВлево(Синий, 16);	
	КонецФункции
#КонецОбласти




#Область СлужебныеПроцедурыИФункции

	Процедура ПреобразоватьКартинкиФорматируемогоДокументаВСериализуемыйФорматРекурсивно(элементыФД)
		Для каждого элФД Из элементыФД Цикл
			Если ТипЗнч(элФД) = Тип("КартинкаФорматированногоДокумента") Тогда
				Если ТипЗнч(элФД.Картинка) = Тип("Картинка") Тогда 
					Результат = ПреобразоватьКартинкуИзОбъектаВоВнедренныйВСтрокуФормат(элФД.Картинка);
					Если Результат = Неопределено Тогда
						Продолжить;
					КонецЕсли;												
					элФД.Картинка = Результат;				
				КонецЕсли;
			ИначеЕсли ТипЗнч(элФД) = Тип("ПараграфФорматированногоДокумента") Тогда
				
				ПреобразоватьКартинкиФорматируемогоДокументаВСериализуемыйФорматРекурсивно(элФД.Элементы);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры

Функция ВставитьФорматированныйДокументВВордРекурсивно(doc, знач startPos, элементыФД, ПервыйАбзац, ДопПараметры)
	pos = startPos;
	endPos = startPos;
	Для каждого элФД Из элементыФД Цикл
		dstRange = doc.Range(pos, pos);
		dstRange.Collapse(0);          
		
		Если ТипЗнч(элФД) = Тип("ТекстФорматированногоДокумента") Тогда
			dstRange.Text = элФД.Текст;            
			Если ЗначениеЗаполнено(элФД.НавигационнаяСсылка) Тогда
				doc.HyperLinks.Add(dstRange, элФД.НавигационнаяСсылка);
			КонецЕсли;                                                                        
			ПреобразоватьОформлениеТекста(dstRange, элФД.Шрифт, элФД.ЦветТекста, элФД.ЦветФона, ДопПараметры);			
			endPos = dstRange.End;
		ИначеЕсли ТипЗнч(элФД) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
			//dstRange.InsertSymbol(11,, Истина);
			// Данный символ означает перевод строки без добавления абзаца
			dstRange.Text=Символы.ВТаб;
			//dstRange.InsertParagraph();
			//dstRange.InsertParagraphAfter();
			endPos = dstRange.End;
		ИначеЕсли ТипЗнч(элФД) = Тип("КартинкаФорматированногоДокумента") Тогда
			ИмяВремФайлаКартинки = Неопределено;
			Если ТипЗнч(элФД.Картинка) = Тип("Строка") Тогда
				Если СтрНачинаетсяС(элФД.Картинка, "data:image/") Тогда
					ИмяВремФайлаКартинки = ПолучитьИмяВременногоФайла(ПолучитьРасширениеКартинки(элФД.Картинка, "jpg"));
					СохранитьBase64КартинкуВФайл(элФД.Картинка, ИмяВремФайлаКартинки); 
				КонецЕсли;
			ИначеЕсли ТипЗнч(элФД.Картинка) = Тип("Картинка") Тогда
				Данные = элФД.Картинка.ПолучитьДвоичныеДанные(Ложь);
				Если Данные <> Неопределено Тогда
					ИмяВремФайлаКартинки = ПолучитьИмяВременногоФайла(ПолучитьРасширениеКартинки(элФД.Картинка, "jpg"));
					Данные.Записать(ИмяВремФайлаКартинки);
				КонецЕсли;								
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяВремФайлаКартинки) Тогда
				ПутьККартинке = ИмяВремФайлаКартинки;
			Иначе
				ПутьККартинке = элФД.Картинка;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПутьККартинке) Тогда
				Ф = Новый Файл(ПутьККартинке);
				Если Ф.Существует() Тогда
					pic = doc.InlineShapes.AddPicture(ПутьККартинке, Ложь, Истина, dstRange);
					 // Зададим размер
					pic.LockAspectRatio = -1;      //сохрняем пропорции
					//pic.Width  = 250;              //устанавливаем ширину
					//// Чтобы установить обтекание текста, конвертируем рисунок в фигуру
					//Shape = Picture.ConvertToShape();
					//Shape.WrapFormat.Type = 5;// перед текстом...
					//Selection.TypeText(Символы.ВК);			
					endPos = pic.Range.End;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяВремФайлаКартинки) Тогда
				УдалитьФайлы(ИмяВремФайлаКартинки);
			КонецЕсли;
		ИначеЕсли ТипЗнч(элФД) = Тип("ПараграфФорматированногоДокумента") Тогда
			Если не ПервыйАбзац Тогда
				dstRange.InsertParagraphAfter();				
			Иначе
				ПервыйАбзац = Ложь;
			КонецЕсли;                          
			
			endPos = ВставитьФорматированныйДокументВВордРекурсивно(doc, dstRange.End, элФД.Элементы, ПервыйАбзац, ДопПараметры);
			
			dstRange = doc.Range(startPos, endPos);
			
			//dstRange.Collapse(0);
			Если элФД.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево Тогда
				dstRange.ParagraphFormat.Alignment = 0; //wdAlignParagraphLeft
			ИначеЕсли элФД.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право Тогда
				dstRange.ParagraphFormat.Alignment = 2; //wdAlignParagraphRight
			ИначеЕсли элФД.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр Тогда
				dstRange.ParagraphFormat.Alignment = 1; //wdAlignParagraphCenter
			ИначеЕсли элФД.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине Тогда
				dstRange.ParagraphFormat.Alignment = 3; //wdAlignParagraphJustify
			ИначеЕсли элФД.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто Тогда
				dstRange.ParagraphFormat.Alignment = 0; //wdAlignParagraphLeft
			КонецЕсли;
			
			dstRange.ParagraphFormat.SpaceBefore = элФД.МеждустрочныйИнтервал;
			//dstRange.ParagraphFormat.SpaceAfter = элФД.МеждустрочныйИнтервал;			
			
			//dstRange.ParagraphFormat.FirstLineIndent = элФД.Отступ;
			dstRange.ParagraphFormat.LeftIndent = элФД.Отступ;
			
			Если элФД.ТипПараграфа = ТипПараграфа.Обычный Тогда
				;//dstRange.ListFormat.RemoveNumbers();
			ИначеЕсли элФД.ТипПараграфа = ТипПараграфа.МаркированныйСписок Тогда
				dstRange.ListFormat.ApplyBulletDefault();
			ИначеЕсли элФД.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
				dstRange.ListFormat.ApplyNumberDefault();
			КонецЕсли;
			endPos = dstRange.End;
		КонецЕсли;
		//dstRange.Collapse(0);
		pos = endPos;	
	КонецЦикла;
	
	Возврат endPos;
КонецФункции

	Функция ИнтернетТипКартинки(Формат)
		Если Формат = ФорматКартинки.BMP Тогда
			Возврат "vnd.wap.wbmp";
		ИначеЕсли Формат = ФорматКартинки.EMF Тогда
			Возврат "emf";
		ИначеЕсли Формат = ФорматКартинки.GIF Тогда
			Возврат "gif";
		ИначеЕсли Формат = ФорматКартинки.Icon Тогда
			Возврат "vnd.microsoft.icon";
		ИначеЕсли Формат = ФорматКартинки.JPEG Тогда
			Возврат "jpeg";
		ИначеЕсли Формат = ФорматКартинки.PNG Тогда
			Возврат "png";
		ИначеЕсли Формат = ФорматКартинки.SVG Тогда
			Возврат "svg+xml";
		ИначеЕсли Формат = ФорматКартинки.TIFF Тогда
			Возврат "tiff";
		ИначеЕсли Формат = ФорматКартинки.WMF Тогда
			Возврат "wmf";
		ИначеЕсли Формат = ФорматКартинки.НеизвестныйФормат Тогда
			Возврат "";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецФункции

	Функция СохранитьBase64КартинкуВФайл(знач СтрДанныеБ64, знач ИмяФайла)
		Если ТипЗнч(СтрДанныеБ64) <> Тип("Строка") или не СтрНачинаетсяС(СтрДанныеБ64, "data:image/") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		позЗапятой = СтрНайти(СтрДанныеБ64, ",", НаправлениеПоиска.СНачала, 12);
		Если позЗапятой = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ГолыеДанныеБ64 = Сред(СтрДанныеБ64, позЗапятой + 1);
		ДД = Base64Значение(ГолыеДанныеБ64);
		ДД.Записать(ИмяФайла);
		Возврат Истина;
	КонецФункции
#КонецОбласти

























	
