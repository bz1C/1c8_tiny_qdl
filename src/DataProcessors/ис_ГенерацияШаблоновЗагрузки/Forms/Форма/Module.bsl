
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДеревоМетаданных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданных()
		
	Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
	
	ЗаполнитьМетаданные(Дерево, "Справочники", 				НСтр("ru = 'Справочники'"), 				 БиблиотекаКартинок.Справочник);
	ЗаполнитьМетаданные(Дерево, "ПланыВидовХарактеристик", 	НСтр("ru = 'Планы видов характеристик'"),	 БиблиотекаКартинок.ПланВидовХарактеристик);
	ЗаполнитьМетаданные(Дерево, "Документы",				НСтр("ru = 'Документы'"), 					 БиблиотекаКартинок.Документ);
	ЗаполнитьМетаданные(Дерево, "РегистрыСведений", 		НСтр("ru = 'Регистры сведений'"),			 БиблиотекаКартинок.РегистрСведений);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоМетаданных");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМетаданные(Дерево, ВидМетаданных, Синоним, Картинка)
		
	Если Метаданные[ВидМетаданных].Количество() > 0 Тогда 
		СтрокаГруппа = Дерево.Строки.Добавить();
		СтрокаГруппа.Имя = ВидМетаданных;
		СтрокаГруппа.Синоним = Синоним;
		СтрокаГруппа.Картинка = Картинка;
		СтрокаГруппа.ЭтоГруппа= Истина;
		Для Каждого ОбъектМетаданных Из Метаданные[ВидМетаданных] Цикл
			
			Если ВидМетаданных = "РегистрыСведений" И 
				 ОбъектМетаданных.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый 
				Тогда
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрока = СтрокаГруппа.Строки.Добавить();
			НоваяСтрока.Тип = СтрокаГруппа.Синоним;
			НоваяСтрока.Имя = ОбъектМетаданных.Имя;
			Если ОбъектМетаданных.Синоним = "" Тогда
				НоваяСтрока.Синоним = ОбъектМетаданных.Имя;
			Иначе
				НоваяСтрока.Синоним = ОбъектМетаданных.Синоним + " (" + ОбъектМетаданных.Имя + ")";
			КонецЕсли; 
			НоваяСтрока.Картинка = СтрокаГруппа.Картинка;
			
			Если ВидМетаданных = "Справочники" ИЛИ ВидМетаданных = "Документы" Тогда
				
				Для й = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() -1 Цикл
					
					НоваяСтрокаТЧ = НоваяСтрока.Строки.Добавить();
					НоваяСтрокаТЧ.Тип = СтрокаГруппа.Синоним;
					НоваяСтрокаТЧ.Имя = ОбъектМетаданных.Имя;
					Если ОбъектМетаданных.Синоним = "" Тогда
						НоваяСтрокаТЧ.Синоним = ОбъектМетаданных.Имя;
					Иначе
						НоваяСтрокаТЧ.Синоним = "ТЧ " +  ОбъектМетаданных.ТабличныеЧасти[й].Имя;
					КонецЕсли; 
					НоваяСтрокаТЧ.Картинка = СтрокаГруппа.Картинка;
					НоваяСтрокаТЧ.ИмяТЧ 	 = ОбъектМетаданных.ТабличныеЧасти[й].Имя;
										
				КонецЦикла;	
				
			КонецЕсли;
			
			Если ВидМетаданных = "Документы" Тогда
				
				Для Каждого Стр Из ОбъектМетаданных.Движения Цикл
					
					ПолноеИмя = Стр.ПолноеИмя();
					Если Найти(ПолноеИмя, "РегистрНакопления.") > 0 Тогда
						ВидМетаданныхДвижений = "РегистрыНакопления";
					ИначеЕсли Найти(ПолноеИмя, "РегистрБухгалтерии.") > 0 Тогда
						ВидМетаданныхДвижений = "РегистрыБухгалтерии";
					ИначеЕсли Найти(ПолноеИмя, "РегистрСведений.") > 0 Тогда
						ВидМетаданныхДвижений = "РегистрыСведений";
					Иначе	
						Продолжить;
					КонецЕсли;	
					
					Если РезультатВыгрузки.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных", ВидМетаданныхДвижений, Стр.Имя)).Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;	
					Если ВыгружаемыеДанные.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных", ВидМетаданныхДвижений, Стр.Имя)).Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					НоваяСтрокаТЧ = НоваяСтрока.Строки.Добавить();
					НоваяСтрокаТЧ.Тип = ВидМетаданныхДвижений;
					НоваяСтрокаТЧ.Имя = Стр.Имя;
					НоваяСтрокаТЧ.Синоним = "Движения " +  Стр.Имя;
					НоваяСтрокаТЧ.Картинка= СтрокаГруппа.Картинка;
					НоваяСтрокаТЧ.ЭтоДвижения = Истина;
					
				КонецЦикла;	
			КонецЕсли;	

		КонецЦикла;	
		
		Если СтрокаГруппа.Строки.Количество() = 0 Тогда 
			Дерево.Строки.Удалить(СтрокаГруппа);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДеревоМетаданныхФлагВыбораПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекДанные.ЭтоГруппа Тогда		
		//Для Каждого Строка Из ТекДанные.ПолучитьЭлементы() Цикл
		//	Строка.ФлагВыбора = ТекДанные.ФлагВыбора;
		//КонецЦикла;		
	Иначе		
		Для Каждого Строка Из ТекДанные.ПолучитьЭлементы() Цикл
			Строка.ФлагВыбора = ТекДанные.ФлагВыбора;
			Для Каждого СтрокаТЧ Из Строка.ПолучитьЭлементы() Цикл
				СтрокаТЧ.ФлагВыбора = ТекДанные.ФлагВыбора;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	

КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите каталог выгрузки'");	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ЗавершениеВыбораКаталога", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт	
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Объект.ИмяКаталога = ВыбранныеФайлы[0];
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
    Для Каждого СтрокаМетаданных Из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		
		СтрокаМетаданных.ФлагВыбора = Истина;
		
		Для Каждого Строка Из СтрокаМетаданных.ПолучитьЭлементы() Цикл
			Строка.ФлагВыбора = Истина;
			
			Для Каждого СтрокаТЧ Из Строка.ПолучитьЭлементы() Цикл
				СтрокаТЧ.ФлагВыбора = Истина;
			КонецЦикла;
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)

    Для Каждого СтрокаМетаданных Из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		
		СтрокаМетаданных.ФлагВыбора = Ложь;
		
		Для Каждого Строка Из СтрокаМетаданных.ПолучитьЭлементы() Цикл
			Строка.ФлагВыбора = Ложь;
			
			Для Каждого СтрокаТЧ Из Строка.ПолучитьЭлементы() Цикл
				СтрокаТЧ.ФлагВыбора = Ложь;
			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ИмяКаталога) Тогда
		
		ТекстСообщения = ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Путь к каталогу выгрузки'") );
		СообщитьПользователю(ТекстСообщения,, "ИмяКаталога", "Объект", );

		Возврат;
		
	КонецЕсли;
	

	ОчиститьКомментарии();
	
    Для Каждого СтрокаМетаданных Из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		
		Для Каждого Строка Из СтрокаМетаданных.ПолучитьЭлементы() Цикл
			
			
			Для Каждого СтрокаТЧ Из Строка.ПолучитьЭлементы() Цикл
				
				Если НЕ СтрокаТЧ.ФлагВыбора Тогда
					Продолжить;
				КонецЕсли;

				//------
				//Выгрузка данных в файл
				//------
				РезультатВыгрузки.Очистить();
				Если СтрокаТЧ.ЭтоДвижения Тогда
					ВыгрузитьМетаданныеВФайл(СтрокаТЧ.Тип, СтрокаТЧ.Имя);
				Иначе
					ВыгрузитьМетаданныеВФайл(СтрокаМетаданных.Имя, Строка.Имя, СтрокаТЧ.ИмяТЧ);
				КонецЕсли;
			
			КонецЦикла;
			
			Если НЕ Строка.ФлагВыбора Тогда
				Продолжить;
			КонецЕсли;
			
			//------
			//Выгрузка данных в файл
			//------
			РезультатВыгрузки.Очистить();
			ВыгрузитьМетаданныеВФайл(СтрокаМетаданных.Имя, Строка.Имя, СтрокаМетаданных.ИмяТЧ);

			
			
		КонецЦикла;

	КонецЦикла;
	
	СообщитьПользователю(НСтр("ru = 'Выгрузка завершена'"));

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует текст ошибок заполнения полей и списков.
//
// Параметры:
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список;
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность;
//  ИмяПоля        - Строка - имя поля;
//  НомерСтроки    - Строка, Число - номер строки;
//  ИмяСписка      - Строка - имя списка;
//  ТекстСообщения - Строка - детальная расшифровка ошибки заполнения.
//
// Возвращаемое значение:
//   Строка - текст ошибки заполнения.
//
&НаКлиенте
Функция ТекстОшибкиЗаполнения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	ИмяПоля = "", НомерСтроки = "", ИмяСписка = "", ТекстСообщения = "") Экспорт

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
								|%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
								|%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
								|%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат ПодставитьПараметрыВСтроку(Шаблон, ИмяПоля, НомерСтроки, ИмяСписка, ТекстСообщения);

КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
&НаКлиенте
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		СтрНайти(Параметр1, "%")
		Или СтрНайти(Параметр2, "%")
		Или СтрНайти(Параметр3, "%")
		Или СтрНайти(Параметр4, "%")
		Или СтрНайти(Параметр5, "%")
		Или СтрНайти(Параметр6, "%")
		Или СтрНайти(Параметр7, "%")
		Или СтрНайти(Параметр8, "%")
		Или СтрНайти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
&НаКлиенте
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКомментарии()
	
	ТабличныйДокумент.Очистить();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Комментарии");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры	
	
//////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ДАННЫХ

&НаКлиенте
Процедура ВыгрузитьМетаданныеВФайл(ВидМетаданных, ИмяМетаданных, ИмяТЧ = "")
	
	Если РезультатВыгрузки.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных, ИмяТЧ", ВидМетаданных, ИмяМетаданных, ИмяТЧ)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;	

	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	ВыгружаемыеДанные.Очистить();
	Предопределенные.Очистить();

	СчетчикГлубинаРекурсии = 0;
	ПолучитьВыгружаемыеДанные(ВидМетаданных, ИмяМетаданных, ИмяТЧ, ,СчетчикГлубинаРекурсии);
	                                       
	ДатаПрефикс = Формат(ТекущаяДата(), "ДФ=HHmmss");
	
	Для Каждого Стр Из ВыгружаемыеДанные Цикл
		
		Файлы.Очистить();
		ДанныеКолонки.Очистить();
	
		//Настройки
		ТабДокумент = ПолучитьНастройкиМетаданных(Стр.ВидМетаданных, Стр.ИмяМетаданных, Стр.ИмяТЧ);
		ИмяФайла    = "Настройки" + ДатаПрефикс + ".xlsx";
		ИмяВременногоФайла = КаталогВременныхФайлов + ?(Прав(КаталогВременныхФайлов, 1) = "\", "", "\") + ИмяФайла;
		ТабДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
		НоваяСтрока = Файлы.Добавить();
		НоваяСтрока.Имя = "Настройки";
		НоваяСтрока.Путь = ИмяВременногоФайла;
		
		Если Стр.ВидМетаданных <> "Перечисления" Тогда
			//Описание
			ТабДокумент = ПолучитьОписаниеМетаданных(Стр.ВидМетаданных, Стр.ИмяМетаданных, Стр.ИмяТЧ);
			ИмяФайла    = "Описание" + ДатаПрефикс + ".xlsx";
			ИмяВременногоФайла = КаталогВременныхФайлов + ?(Прав(КаталогВременныхФайлов, 1) = "\", "", "\") + ИмяФайла;
			ТабДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
			НоваяСтрока = Файлы.Добавить();
			НоваяСтрока.Имя = "Описание";
			НоваяСтрока.Путь = ИмяВременногоФайла;
			
			//Данные
			ТабДокумент = ПолучитьДанныеМетаданных(Стр.ВидМетаданных, Стр.ИмяМетаданных, Стр.ИмяТЧ);
			ИмяФайла    = "Данные" + ДатаПрефикс + ".xlsx";
			ИмяВременногоФайла = КаталогВременныхФайлов + ?(Прав(КаталогВременныхФайлов, 1) = "\", "", "\") + ИмяФайла;
			ТабДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
			НоваяСтрока = Файлы.Добавить();
			НоваяСтрока.Имя = "Данные";
			НоваяСтрока.Путь = ИмяВременногоФайла;
		КонецЕсли;
		
		//Предопределенные
		ТабДокумент = ПолучитьПредопределенныеМетаданных(Стр.ВидМетаданных, Стр.ИмяМетаданных, Стр.ИмяТЧ);
		ИмяФайла    = "Предопределенные" + ДатаПрефикс + ".xlsx";
		ИмяВременногоФайла = КаталогВременныхФайлов + ?(Прав(КаталогВременныхФайлов, 1) = "\", "", "\") + ИмяФайла;
		ТабДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
		НоваяСтрока = Файлы.Добавить();
		НоваяСтрока.Имя = "Предопределенные";
		НоваяСтрока.Путь = ИмяВременногоФайла;
		
		ИмяМД = "Неопределено";
		Если Стр.ВидМетаданных = "Справочники"	Тогда
			ИмяМД = "Справочник";
		ИначеЕсли Стр.ВидМетаданных = "Документы"	Тогда	
			ИмяМД = "Документ";
		ИначеЕсли Стр.ВидМетаданных = "Перечисления"	Тогда	
			ИмяМД = "Перечисление";	
		ИначеЕсли Стр.ВидМетаданных = "ПланыВидовХарактеристик"	Тогда
			ИмяМД = "ПланВидовХарактеристик";
		ИначеЕсли Стр.ВидМетаданных = "ПланыСчетов"	Тогда	
			ИмяМД = "ПланСчетов";
		ИначеЕсли Стр.ВидМетаданных = "РегистрыНакопления"	Тогда	
			ИмяМД = "РегистрНакопления";
		ИначеЕсли Стр.ВидМетаданных = "РегистрыБухгалтерии"	Тогда	
			ИмяМД = "РегистрБухгалтерии";
		ИначеЕсли Стр.ВидМетаданных = "РегистрыСведений"	Тогда	
			ИмяМД = "РегистрСведений";		
		КонецЕсли;
		
		ВыгрузитьРезультирующийФайл(ИмяМД + "." + Стр.ИмяМетаданных + ?(ЗначениеЗаполнено(Стр.ИмяТЧ), ".ТЧ." + Стр.ИмяТЧ, "") +  ".xlsx");
		
		УдалитьФайлы(КаталогВременныхФайлов, "*" + ДатаПрефикс+ ".xlsx");
		
		НоваяСтрока = РезультатВыгрузки.Добавить();
		НоваяСтрока.ВидМетаданных = ВидМетаданных;
		НоваяСтрока.ИмяМетаданных = ИмяМетаданных;

	КонецЦикла;
	
	//Общие предопределенные
	//ТабДокумент = ПолучитьОбщиеДанныеПредопределенныеМетаданных();
	//ИмяФайла    = Объект.ИмяКаталога + ?(Прав(Объект.ИмяКаталога, 1) = "\", "", "\") + "Предопределенные.xlsx";
	//ТабДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);

КонецПроцедуры

&НаСервере
Процедура ПолучитьВыгружаемыеДанные(ВидМетаданных, ИмяМетаданных, ИмяТЧ, ФлагРекурсии = Ложь, СчетчикГлубинаРекурсии)
		
	Если РезультатВыгрузки.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных, ИмяТЧ", ВидМетаданных, ИмяМетаданных, ИмяТЧ)).Количество() > 0 Тогда
		Сообщить("Глубина рекурсии: " + СчетчикГлубинаРекурсии + ": "  + " " + ВидМетаданных + "." + ИмяМетаданных + ": Пропущен");
		Возврат;
	КонецЕсли;	
	Если ВыгружаемыеДанные.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных, ИмяТЧ", ВидМетаданных, ИмяМетаданных, ИмяТЧ)).Количество() > 0 Тогда
		Сообщить("Глубина рекурсии: " + СчетчикГлубинаРекурсии + ": "  + " " + ВидМетаданных + "." + ИмяМетаданных + ": Пропущен");
		Возврат;
	КонецЕсли;	
	
	ВыгружаемыеМетаданные = Метаданные[ВидМетаданных][ИмяМетаданных];

	НоваяСтрока = ВыгружаемыеДанные.Добавить();
	НоваяСтрока.ВидМетаданных = ВидМетаданных;
	НоваяСтрока.ИмяМетаданных = ИмяМетаданных;
	НоваяСтрока.ИмяТЧ         = ИмяТЧ;
	
	Если ВидМетаданных = "Перечисления" Тогда
		Возврат;
	КонецЕсли;	
	
	//Если (ВидМетаданных = "Справочники" ИЛИ ВидМетаданных = "Документы") И ФлагРекурсии Тогда
	//	
	//	Для й = 0 По ВыгружаемыеМетаданные.ТабличныеЧасти.Количество() -1 Цикл
	//		НоваяСтрока = ВыгружаемыеДанные.Добавить();
	//		НоваяСтрока.ВидМетаданных = ВидМетаданных;
	//		НоваяСтрока.ИмяМетаданных = ИмяМетаданных;
	//		НоваяСтрока.ИмяТЧ 		  = ВыгружаемыеМетаданные.ТабличныеЧасти[й].Имя;
	//	КонецЦикла;	
	//	
	//КонецЕсли;
	
	//Если ВидМетаданных = "Документы" И Объект.ВыгружатьДвиженияДокументов И НЕ ФлагРекурсии Тогда
	//	
	//	Для Каждого Стр Из ВыгружаемыеМетаданные.Движения Цикл
	//		
	//		ПолноеИмя = Стр.ПолноеИмя();
	//		Если Найти(ПолноеИмя, "РегистрНакопления.") > 0 Тогда
	//			ВидМетаданныхДвижений = "РегистрыНакопления";
	//		ИначеЕсли Найти(ПолноеИмя, "РегистрБухгалтерии.") > 0 Тогда
	//			ВидМетаданныхДвижений = "РегистрыБухгалтерии";
	//		ИначеЕсли Найти(ПолноеИмя, "РегистрСведений.") > 0 Тогда
	//			ВидМетаданныхДвижений = "РегистрыСведений";
	//		Иначе	
	//			Продолжить;
	//		КонецЕсли;	
	//		
	//		Если РезультатВыгрузки.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных", ВидМетаданныхДвижений, Стр.Имя)).Количество() > 0 Тогда
	//			Продолжить;
	//		КонецЕсли;	
	//		Если ВыгружаемыеДанные.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных", ВидМетаданныхДвижений, Стр.Имя)).Количество() > 0 Тогда
	//			Продолжить;
	//		КонецЕсли;	
	//		
	//		НоваяСтрока = ВыгружаемыеДанные.Добавить();
	//		НоваяСтрока.ВидМетаданных = ВидМетаданныхДвижений;
	//		НоваяСтрока.ИмяМетаданных = Стр.Имя;
	//		
	//	КонецЦикла;	

	//КонецЕсли;
	

	Если НЕ Объект.ВыгружатьРекурсивно Тогда
		Возврат;
	КонецЕсли;
	
	НоваяГлубинаРекурсии = СчетчикГлубинаРекурсии + 1;
	Если НоваяГлубинаРекурсии > Объект.ГлубинаРекурсии Тогда
		Возврат;
	КонецЕсли;	
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Комментарии");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");	
	
	ТипВсеСсылки = Справочники.ТипВсеСсылки();
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Документы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыОбмена.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыСчетов.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Перечисления.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, БизнесПроцессы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Задачи.ТипВсеСсылки().Типы());
	
	МассивНабораДанных = Новый Массив();

	Если ВидМетаданных = "Справочники" ИЛИ ВидМетаданных = "ПланыВидовХарактеристик" ИЛИ ВидМетаданных = "ПланыСчетов" Тогда
		
		МассивНабораДанных.Добавить("Реквизиты");
		
	ИначеЕсли ВидМетаданных = "Документы" Тогда
		
		МассивНабораДанных.Добавить("Реквизиты");
				
	ИначеЕсли ВидМетаданных = "РегистрыСведений"  ИЛИ
		      ВидМетаданных = "РегистрыНакопления" ИЛИ
			  ВидМетаданных = "РегистрыБухгалтерии" Тогда
			  
		МассивНабораДанных.Добавить("Измерения");
		МассивНабораДанных.Добавить("Ресурсы");
		МассивНабораДанных.Добавить("Реквизиты");

	КонецЕсли;	

	Для Каждого ЭлементНабораДанных Из МассивНабораДанных Цикл
		
		Для й = 0 По ВыгружаемыеМетаданные[ЭлементНабораДанных].Количество() - 1 Цикл
			
			Реквизит = ВыгружаемыеМетаданные[ЭлементНабораДанных][й];
			
			Если Реквизит.Тип.Типы().Количество() > ТипВсеСсылки.Типы().Количество() ИЛИ Реквизит.Тип.Типы().Количество() > 20 ИЛИ  (Реквизит.Тип.Типы().Количество() > 1 И Объект.НеВыгружатьСоставныеТипы) Тогда
				
				ОбластьСтрока.Параметры.Метаданные  = ВидМетаданных + "." + ИмяМетаданных;
				ОбластьСтрока.Параметры.Реквизит    = Реквизит.Имя;
				ОбластьСтрока.Параметры.ИмяТЧ	    = ИмяТЧ;
				ОбластьСтрока.Параметры.Комментарий = "Составной тип не выгружен";
				ТабличныйДокумент.Вывести(ОбластьСтрока);

				Продолжить;
				
			КонецЕсли;
			
			Для Каждого Тип из Реквизит.Тип.Типы() Цикл 

				Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
					ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);
					Сообщить("Глубина рекурсии: " + НоваяГлубинаРекурсии + "; " + ВидМетаданных + "." + ИмяМетаданных + "; Реквизит: " + Реквизит.Имя + "; Тип: " + "Справочники."+ОбъектМетаданных.Имя);
					ПолучитьВыгружаемыеДанные("Справочники", ОбъектМетаданных.Имя, "", Истина, НоваяГлубинаРекурсии);
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда	
					ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);
					Сообщить("Глубина рекурсии: " + НоваяГлубинаРекурсии + "; " + ВидМетаданных + "." + ИмяМетаданных + "; Реквизит: " + Реквизит.Имя + "; Тип: " + "Документы."+ОбъектМетаданных.Имя);
					ПолучитьВыгружаемыеДанные("Документы", ОбъектМетаданных.Имя, "", Истина, НоваяГлубинаРекурсии);
				ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
					ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);
					Сообщить("Глубина рекурсии: " + НоваяГлубинаРекурсии + "; " + ВидМетаданных + "." + ИмяМетаданных + "; Реквизит: " + Реквизит.Имя + "; Тип: " + "ПланыВидовХарактеристик."+ОбъектМетаданных.Имя);
					ПолучитьВыгружаемыеДанные("ПланыВидовХарактеристик", ОбъектМетаданных.Имя, "", Истина, НоваяГлубинаРекурсии);
				ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
					ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);				
					Сообщить("Глубина рекурсии: " + НоваяГлубинаРекурсии + "; " + ВидМетаданных + "." + ИмяМетаданных + "; Реквизит: " + Реквизит.Имя + "; Тип: " + "ПланыСчетов."+ОбъектМетаданных.Имя);
					ПолучитьВыгружаемыеДанные("ПланыСчетов", ОбъектМетаданных.Имя, "", Истина, НоваяГлубинаРекурсии);
				ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
					ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);				
					Сообщить("Глубина рекурсии: " + НоваяГлубинаРекурсии + "; " + ВидМетаданных + "." + ИмяМетаданных + "; Реквизит: " + Реквизит.Имя + "; Тип: " + "Перечисления."+ОбъектМетаданных.Имя);
					ПолучитьВыгружаемыеДанные("Перечисления", ОбъектМетаданных.Имя, "", Истина, НоваяГлубинаРекурсии);
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		Если ВидМетаданных = "РегистрыБухгалтерии"  Тогда
			ОбъектМетаданных=ВыгружаемыеМетаданные.ПланСчетов;				
			Сообщить("Глубина рекурсии: " + НоваяГлубинаРекурсии + "; " + ВидМетаданных + "." + ИмяМетаданных + "; Реквизит: " + Реквизит.Имя + "; Тип: " + "ПланыСчетов."+ОбъектМетаданных.Имя);
			ПолучитьВыгружаемыеДанные("ПланыСчетов", ОбъектМетаданных.Имя, "", Истина, НоваяГлубинаРекурсии);
		КонецЕсли;	

	КонецЦикла;	

КонецПроцедуры

// Формирует страницу файла Настройки
//
&НаСервере
Функция ПолучитьНастройкиМетаданных(ВидМетаданных, ИмяМетаданных, ИмяТЧ = "")
	
	ТабДокумент = Новый ТабличныйДокумент();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Настройки");
	
	ОбластьДанные = Макет.ПолучитьОбласть("Данные");
	
	
	ИмяМД = "Неопределено";
	Если ВидМетаданных = "Справочники"	Тогда
		ИмяМД = "Справочник";
	ИначеЕсли ВидМетаданных = "Документы"	Тогда	
		ИмяМД = "Документ";
	ИначеЕсли ВидМетаданных = "Перечисления"	Тогда	
		ИмяМД = "Перечисление";	
	ИначеЕсли ВидМетаданных = "ПланыВидовХарактеристик"	Тогда
		ИмяМД = "ПланВидовХарактеристик";
	ИначеЕсли ВидМетаданных = "ПланыСчетов"	Тогда	
		ИмяМД = "ПланСчетов";
	ИначеЕсли ВидМетаданных = "РегистрыНакопления"	Тогда	
		ИмяМД = "РегистрНакопления";
	ИначеЕсли ВидМетаданных = "РегистрыБухгалтерии"	Тогда	
		ИмяМД = "РегистрБухгалтерии";
	ИначеЕсли ВидМетаданных = "РегистрыСведений"	Тогда	
		ИмяМД = "РегистрСведений";		
	КонецЕсли;

	ОбластьДанные.Параметры.Имя    	    = "" + ИмяМД + "." + ИмяМетаданных;
	ОбластьДанные.Параметры.Синоним     = Метаданные[ВидМетаданных][ИмяМетаданных].Синоним + " ТЧ " + ИмяТЧ;                                           	
	ОбластьДанные.Параметры.Комментарий = Метаданные[ВидМетаданных][ИмяМетаданных].Комментарий;
	ОбластьДанные.Параметры.ИмяТЧ 	    = ИмяТЧ;
	
	ТабДокумент.Вывести(ОбластьДанные);
	
	Возврат ТабДокумент;
	
КонецФункции

// Формирует страницу файла Описание
//
&НаСервере
Функция ПолучитьОписаниеМетаданных(ВидМетаданных, ИмяМетаданных, ИмяТЧ = "")
	
	ВыгружаемыеМетаданные = Метаданные[ВидМетаданных][ИмяМетаданных];
	
	ТабДокумент = Новый ТабличныйДокумент();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Описание");
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьДанные = Макет.ПолучитьОбласть("Данные");

	ТабДокумент.Вывести(ОбластьШапка);
	
	МассивНабораДанных = Новый Массив();
	
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		
		ВыгружаемыеМетаданные = Метаданные[ВидМетаданных][ИмяМетаданных].ТабличныеЧасти[ИмяТЧ];
		МассивНабораДанных.Добавить("Реквизиты");

		ДанныеКолонки.Добавить("Ссылка");

		
	ИначеЕсли ВидМетаданных = "Справочники" ИЛИ ВидМетаданных = "ПланыВидовХарактеристик" ИЛИ ВидМетаданных = "ПланыСчетов" Тогда
		
		МассивНабораДанных.Добавить("СтандартныеРеквизиты");
		МассивНабораДанных.Добавить("ОбщиеРеквизиты");
		МассивНабораДанных.Добавить("Реквизиты");
		
		ДанныеКолонки.Добавить("ID");
		ДанныеКолонки.Добавить("Ref");		
		
	ИначеЕсли ВидМетаданных = "Документы" Тогда
		
		МассивНабораДанных.Добавить("СтандартныеРеквизиты");
		МассивНабораДанных.Добавить("ОбщиеРеквизиты");
		МассивНабораДанных.Добавить("Реквизиты");
		
		ДанныеКолонки.Добавить("ID");
		ДанныеКолонки.Добавить("Ref");		

	ИначеЕсли ВидМетаданных = "РегистрыСведений" ИЛИ
		      ВидМетаданных = "РегистрыНакопления" Тогда  
			  
		МассивНабораДанных.Добавить("СтандартныеРеквизиты");
		МассивНабораДанных.Добавить("Измерения");
		МассивНабораДанных.Добавить("Ресурсы");
		МассивНабораДанных.Добавить("Реквизиты");
		
	ИначеЕсли ВидМетаданных = "РегистрыБухгалтерии" Тогда  
			  
		МассивНабораДанных.Добавить("СтандартныеРеквизиты");
		МассивНабораДанных.Добавить("Счет");
		МассивНабораДанных.Добавить("Измерения");
		МассивНабораДанных.Добавить("Ресурсы");
		МассивНабораДанных.Добавить("Реквизиты");
	
	КонецЕсли;	
	
	ПодчиненРегистратору = Ложь;
	
	ТипВсеСправочники = Справочники.ТипВсеСсылки();
	ТипВсеДокументы   = Документы.ТипВсеСсылки();
	
	ТипВсеСсылки = Справочники.ТипВсеСсылки();
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Документы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыОбмена.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыСчетов.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Перечисления.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, БизнесПроцессы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Задачи.ТипВсеСсылки().Типы());

	Для Каждого ЭлементНабораДанных Из МассивНабораДанных Цикл
		
		Если ЭлементНабораДанных = "ОбщиеРеквизиты" Тогда
			КоличествоРеквизитов = Метаданные.ОбщиеРеквизиты.Количество() -1 ; 
		ИначеЕсли ЭлементНабораДанных = "Счет" Тогда
	        КоличествоРеквизитов = 0;
		Иначе	
			КоличествоРеквизитов = ВыгружаемыеМетаданные[ЭлементНабораДанных].Количество() - 1;
		КонецЕсли;                                                 
	
		Для й = 0 По КоличествоРеквизитов Цикл
			
			Если ЭлементНабораДанных = "ОбщиеРеквизиты" Тогда
				Реквизит = Метаданные.ОбщиеРеквизиты[й];
				Если НЕ Реквизит.Состав.Содержит(ВыгружаемыеМетаданные) Тогда
					Продолжить;
				Иначе
					СтрПоискаОбщегоРеквизита = Реквизит.Состав.Найти(ВыгружаемыеМетаданные);
					Если СтрПоискаОбщегоРеквизита = Неопределено Тогда
						Продолжить;
					Иначе
						Если СтрПоискаОбщегоРеквизита.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
							Продолжить;
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;	
				Если  Реквизит.РазделениеДанных <> Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать Тогда
					Продолжить;
				КонецЕсли;	
			ИначеЕсли ЭлементНабораДанных = "СтандартныеРеквизиты" Тогда
				Если Найти(ВидМетаданных, "Регистры") > 0 Тогда
					Реквизит = ВыгружаемыеМетаданные[ЭлементНабораДанных][й];
				Иначе	
					Реквизит = ВыгружаемыеМетаданные[ЭлементНабораДанных][ВыгружаемыеМетаданные[ЭлементНабораДанных].Количество() - 1 - й];
				КонецЕсли;
				Если  Реквизит.Имя = "Предопределенный" ИЛИ Реквизит.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;	
				Если  Реквизит.Имя = "Регистратор" Тогда
					ПодчиненРегистратору = Истина;
				КонецЕсли;		
				Если Найти(Реквизит.Имя, "ВидСубконто") > 0 Тогда
					Продолжить;
				КонецЕсли;	
				
			ИначеЕсли ЭлементНабораДанных = "Счет" Тогда
	
			Иначе	
				Реквизит = ВыгружаемыеМетаданные[ЭлементНабораДанных][й];
			КонецЕсли;
			
			МассивДтКт = Новый Массив();
			Если ВидМетаданных = "РегистрыБухгалтерии" И  (
				 ((ЭлементНабораДанных = "Измерения" ИЛИ ЭлементНабораДанных = "Ресурсы") И  НЕ Реквизит.Балансовый) ИЛИ 
				  (ЭлементНабораДанных = "Счет") ИЛИ
				  (ЭлементНабораДанных = "СтандартныеРеквизиты" И Найти(Реквизит.Имя, "Субконто") > 0)
				 )
				Тогда 
				МассивДтКт.Добавить("Дт");
				МассивДтКт.Добавить("Кт");
			Иначе
				МассивДтКт.Добавить("");	
			КонецЕсли;	
			
			
			Для Каждого ЭлементДтКт Из МассивДтКт Цикл
				
				Если ЭлементНабораДанных = "Счет" Тогда
					
					ОбластьДанные.Параметры.Колонка 			= "Счет" + ЭлементДтКт;
					ОбластьДанные.Параметры.Имя 				= "Счет" + ЭлементДтКт;
					ОбластьДанные.Параметры.ПроверкаЗаполнения	= "Да";
					ОбластьДанные.Параметры.Синоним 			= "Счет" + " " + ЭлементДтКт;

					ОбластьДанные.Параметры.Тип 				= "ПланСчетов." + ВыгружаемыеМетаданные.ПланСчетов.Имя;
					ОбластьДанные.Параметры.Длина  			    = "";
					ОбластьДанные.Параметры.Точность			= "";
					ОбластьДанные.Параметры.Комментарий			= "";
	
					ОбластьДанные.Параметры.ПредопределенныеЗначения = "";
					ОбластьДанные.Параметры.ПолеОтбора 			= "";				
					ТабДокумент.Вывести(ОбластьДанные);
					
					Продолжить;
					
				КонецЕсли;
				
				ДанныеКолонки.Добавить(Реквизит.Имя + ЭлементДтКт);
				
				ОбластьДанные.Параметры.Колонка 			= Реквизит.Имя + ЭлементДтКт;
				ОбластьДанные.Параметры.Имя 				= Реквизит.Имя + ЭлементДтКт;
				ОбластьДанные.Параметры.ПроверкаЗаполнения	= ?(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, "Да", "Нет");
				ОбластьДанные.Параметры.Синоним 			= ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним + " " + ЭлементДтКт, "");
				
				ТипТекст = "";	
				
				Если Реквизит.Тип = ТипВсеСправочники Тогда
					ТипТекст = "Любой справочник";
				ИначеЕсли Реквизит.Тип = ТипВсеДокументы Тогда
					ТипТекст = "Любой документ";
				ИначеЕсли Реквизит.Тип.Типы().Количество() > ТипВсеСсылки.Типы().Количество() ИЛИ Реквизит.Тип.Типы().Количество() > 50 Тогда
					Если Реквизит.Имя = "Регистратор" Тогда
						ТипТекст = "Любой документ";
					Иначе	
						ТипТекст = "Любая ссылка";
					КонецЕсли;
				Иначе	
					Для Каждого Тип из Реквизит.Тип.Типы() Цикл 
						ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);
						Если ОбъектМетаданных = Неопределено Тогда
							ТипТекст = ТипТекст + Тип + Символы.ПС;
						Иначе	
							ТипТекст = ТипТекст + ОбъектМетаданных.ПолноеИмя() + Символы.ПС;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				ОбластьДанные.Параметры.Тип 				= ТипТекст;
				ОбластьДанные.Параметры.Длина  			    = "";
				ОбластьДанные.Параметры.Точность			= "";
				Если Строка(Реквизит.Тип) = "Строка" Тогда
					ОбластьДанные.Параметры.Длина    = Реквизит.Тип.КвалификаторыСтроки.Длина;
				ИначеЕсли Строка(Реквизит.Тип) = "Число" Тогда	
					ОбластьДанные.Параметры.Длина    = Реквизит.Тип.КвалификаторыЧисла.Разрядность;
					ОбластьДанные.Параметры.Точность = Реквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
				КонецЕсли;	
				ОбластьДанные.Параметры.Комментарий			 = Реквизит.Комментарий;
				
				ПредопределенныеЗначения = "";
				Если Реквизит.Тип.Типы().Количество() < 10 Тогда 
					Для Каждого Тип из Реквизит.Тип.Типы() Цикл 
						Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
							ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);
							СтрокиПоиска = Предопределенные.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных", "Перечисления", ОбъектМетаданных.Имя));
							Если СтрокиПоиска.Количество() > 0 Тогда
								//Для Каждого СтрПоиска Из СтрокиПоиска Цикл
								//	ПредопределенныеЗначения = ПредопределенныеЗначения + СтрПоиска.Имя + Символы.ПС;
								//КонецЦикла;	
							Иначе	
								Для к = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() -1 Цикл
									ПредопределенныеЗначения = ПредопределенныеЗначения + ОбъектМетаданных.ЗначенияПеречисления[к].Имя + Символы.ПС;
									НоваяСтрока = Предопределенные.Добавить();
									НоваяСтрока.ВидМетаданных 	= "Перечисления";
									НоваяСтрока.ИмяМетаданных	= ОбъектМетаданных.Имя;
									НоваяСтрока.Имя 			= ОбъектМетаданных.ЗначенияПеречисления[к].Имя;
									НоваяСтрока.Синоним 		= ОбъектМетаданных.ЗначенияПеречисления[к].Синоним;
									НоваяСтрока.Комментарий 	= ОбъектМетаданных.ЗначенияПеречисления[к].Комментарий;
								КонецЦикла;
							КонецЕсли;
						ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(Тип) ИЛИ  
							ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) ИЛИ  
							ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) 
							Тогда
							
							Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
								ИмяМетаданныхВЗапросе = "Справочник";
								ИмяМетаданныхПР       = "Справочники";
							ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)	Тогда
								ИмяМетаданныхВЗапросе = "ПланВидовХарактеристик";
								ИмяМетаданныхПР       = "ПланыВидовХарактеристик";
							ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) 	Тогда	
								ИмяМетаданныхВЗапросе = "ПланСчетов";
								ИмяМетаданныхПР       = "ПланыСчетов";
							КонецЕсли;
							
							
							ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);
							СтрокиПоиска = Предопределенные.НайтиСтроки(Новый Структура("ВидМетаданных, ИмяМетаданных", ИмяМетаданныхПР, ОбъектМетаданных.Имя));
							Если СтрокиПоиска.Количество() > 0 Тогда
								//Для Каждого СтрПоиска Из СтрокиПоиска Цикл
								//    Если НЕ ЗначениеЗаполнено(СтрПоиска.Имя) Тогда
								//  	  Прервать;
								//    КонецЕсли;	
								//    //ПредопределенныеЗначения = ПредопределенныеЗначения + СтрПоиска.Имя + Символы.ПС;
								//КонецЦикла;	
							Иначе	
								
								Запрос = Новый Запрос(
								"ВЫБРАТЬ
								|	"+?(ОбъектМетаданных.ДлинаНаименования = 0, """""", "Наименование") +" КАК Наименование,
								|	ИмяПредопределенныхДанных КАК Имя,
								|	"+?(ОбъектМетаданных.ДлинаКода = 0, """""", "Код") +" КАК Код
								|ИЗ
								|	"+ИмяМетаданныхВЗапросе+"."+ ОбъектМетаданных.Имя +"
								|ГДЕ
								|	Предопределенный");
								
								Выборка = Запрос.Выполнить().Выбрать();
								
								Если Выборка.Количество() > 0 Тогда
									Пока Выборка.Следующий() Цикл
										Если Выборка.Количество() < 30 Тогда
											ПредопределенныеЗначения = ПредопределенныеЗначения + Выборка.Имя + Символы.ПС;
											НоваяСтрока = Предопределенные.Добавить();
											НоваяСтрока.ВидМетаданных 	= ИмяМетаданныхПР;
											НоваяСтрока.ИмяМетаданных	= ОбъектМетаданных.Имя;
											НоваяСтрока.Имя 			= Выборка.Имя;
											НоваяСтрока.Код 		    = Выборка.Код;
											НоваяСтрока.Наименование 	= Выборка.Наименование;
										КонецЕсли;
									КонецЦикла;
								Иначе
									НоваяСтрока = Предопределенные.Добавить();
									НоваяСтрока.ВидМетаданных 	= ИмяМетаданныхПР;
									НоваяСтрока.ИмяМетаданных	= ОбъектМетаданных.Имя;
								КонецЕсли;
								
							КонецЕсли;						
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				ОбластьДанные.Параметры.ПредопределенныеЗначения = ПредопределенныеЗначения;
				
				Если ЭлементНабораДанных = "СтандартныеРеквизиты" И Реквизит.Имя = "ВидДвижения" Тогда
					ОбластьДанные.Параметры.ПредопределенныеЗначения = "Приход" + Символы.ПС  + "Расход";
				КонецЕсли;
				
				ОбластьДанные.Параметры.ПолеОтбора 			 = "";
				Если Реквизит.Имя = "Регистратор" Тогда
					ОбластьДанные.Параметры.ПолеОтбора 			 = "Да";
				ИначеЕсли ЭлементНабораДанных = "Измерения" Тогда
					Если НЕ ПодчиненРегистратору И Реквизит.ОсновнойОтбор Тогда
						ОбластьДанные.Параметры.ПолеОтбора 			 = "Да";
					КонецЕсли;	
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьДанные);
				
			КонецЦикла;
		
		КонецЦикла;	
		
	КонецЦикла;	

	Возврат ТабДокумент;
	
КонецФункции	

// Формирует страницу файла Данные
//
&НаСервере
Функция ПолучитьДанныеМетаданных(ВидМетаданных, ИмяМетаданных, ИмяТЧ = "")
	
	ВыгружаемыеМетаданные = Метаданные[ВидМетаданных][ИмяМетаданных];

	ТабДокумент = Новый ТабличныйДокумент();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Данные");
	
	ОбластьДанные = Макет.ПолучитьОбласть("Строка|Столбец");
	
	ФлагПервого = Истина;
	Для Каждого Стр Из ДанныеКолонки Цикл
		ОбластьДанные.Параметры.Колонка  = Стр.Значение;
		Если ФлагПервого Тогда
			ФлагПервого = Ложь;
			ТабДокумент.Вывести(ОбластьДанные);
		Иначе
			ТабДокумент.Присоединить(ОбластьДанные);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

// Формирует страницу файла Предопределенные
//
&НаСервере
Функция ПолучитьПредопределенныеМетаданных(ВидМетаданных, ИмяМетаданных, ИмяТЧ = "")
	
	ВыгружаемыеМетаданные = Метаданные[ВидМетаданных][ИмяМетаданных];

	ТабДокумент = Новый ТабличныйДокумент();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Предопределенные");
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьДанные = Макет.ПолучитьОбласть("Данные");

	ТабДокумент.Вывести(ОбластьШапка);
	        
	Если ВидМетаданных = "Справочники" ИЛИ ВидМетаданных = "ПланыВидовХарактеристик" ИЛИ ВидМетаданных = "ПланыСчетов"   Тогда
		
		Если ВидМетаданных = "Справочники" Тогда
			ИмяМетаданныхВЗапросе = "Справочник";
		ИначеЕсли ВидМетаданных = "ПланыВидовХарактеристик"	Тогда
			ИмяМетаданныхВЗапросе = "ПланВидовХарактеристик";
		ИначеЕсли ВидМетаданных = "ПланыСчетов"	Тогда	
			ИмяМетаданныхВЗапросе = "ПланСчетов";
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	"+?(ВыгружаемыеМетаданные.ДлинаНаименования = 0, """""", "Наименование") +" КАК Наименование,
		|	ИмяПредопределенныхДанных КАК Имя,
		|	"+?(ВыгружаемыеМетаданные.ДлинаКода = 0, """""", "Код") +" КАК Код
		|ИЗ
		|	"+ИмяМетаданныхВЗапросе+"."+ ВыгружаемыеМетаданные.Имя +"
		|ГДЕ
		|	Предопределенный");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьДанные.Параметры.Имя 			= Выборка.Имя;
			ОбластьДанные.Параметры.Код 		    = Выборка.Код;
			ОбластьДанные.Параметры.Наименование 	= Выборка.Наименование;
			
			ТабДокумент.Вывести(ОбластьДанные);
			
		КонецЦикла;
		
	ИначеЕсли ВидМетаданных = "Перечисления" Тогда
		
		Для к = 0 По ВыгружаемыеМетаданные.ЗначенияПеречисления.Количество() -1 Цикл
			
			ОбластьДанные.Параметры.Имя 			= ВыгружаемыеМетаданные.ЗначенияПеречисления[к].Имя;
			ОбластьДанные.Параметры.Синоним 		= ВыгружаемыеМетаданные.ЗначенияПеречисления[к].Синоним;
			ОбластьДанные.Параметры.Комментарий 	= ВыгружаемыеМетаданные.ЗначенияПеречисления[к].Комментарий;
			
			ТабДокумент.Вывести(ОбластьДанные);

		КонецЦикла;
		
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции

// Формирует общий файл Предопределенные
//
&НаСервере
Функция ПолучитьОбщиеДанныеПредопределенныеМетаданных()
	

	ТабДокумент = Новый ТабличныйДокумент();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Предопределенные");
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьДанные = Макет.ПолучитьОбласть("Данные");

	ТабДокумент.Вывести(ОбластьШапка);
			
	Для Каждого Стр Из Предопределенные Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.Имя) Тогда
			Продолжить;
		КонецЕсли;	
								  
		ОбластьДанные.Параметры.Заполнить(Стр);
		ТабДокумент.Вывести(ОбластьДанные);
		
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьРезультирующийФайл(ИмяФайла)
	
	Попытка
		ExcelПриложение = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Ошибка при загрузке Microsoft Excel." + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
	ExcelПриложение.SheetsInNewWorkbook = 1;
	Книга = ExcelПриложение.Workbooks.Add(); 
	
	Первый      = Истина; 
	ПрошлыйЛист = Неопределено; 
	
	Для Каждого Стр Из Файлы  Цикл
		ExcelПриложение.CutCopyMode = False; 
		
		мКнига = ExcelПриложение.Workbooks.Open(Стр.Путь);
		мКнига.Worksheets(1).Cells.Select();
		ExcelПриложение.Selection.Copy();
		
		Если Первый Тогда 
			НовыйЛист = Книга.Worksheets(1);
			Первый = Ложь;
		Иначе 
			НовыйЛист = Книга.Worksheets.Add(, ПрошлыйЛист); 
		КонецЕсли; 
		
		НовыйЛист.Name = Строка(Стр.Имя); 		
		НовыйЛист.Paste();
		
		НовыйЛист.Activate();
		ExcelПриложение.Range("A1").Select(); 
		
		ПрошлыйЛист = НовыйЛист;
	КонецЦикла;
	
	//Описание
	Книга.Names.Add("Имя", 			 "=Настройки!R2C3:R2C3");
	Книга.Names.Add("ТЧ", 			 "=Настройки!R3C3:R3C3");

	Если Файлы.НайтиСтроки(Новый Структура("Имя", "Описание")).Количество() > 0 Тогда
		//Описание
		Книга.Names.Add("КолонкаДанных", 	 		   	 	 "=Описание!R1C1:R1C1");
		Книга.Names.Add("КолонкаИмя", 	 			   	 	 "=Описание!R1C2:R1C2");
		Книга.Names.Add("КолонкаПроверкаЗаполнения", 		 "=Описание!R1C3:R1C3");
		Книга.Names.Add("КолонкаСиноним", 					 "=Описание!R1C4:R1C4");
		Книга.Names.Add("КолонкаТип", 	 					 "=Описание!R1C5:R1C5");
		Книга.Names.Add("КолонкаДлина", 					 "=Описание!R1C6:R1C6");
		Книга.Names.Add("КолонкаТочность", 					 "=Описание!R1C7:R1C7");
		Книга.Names.Add("КолонкаКомментарий", 				 "=Описание!R1C8:R1C8");
		Книга.Names.Add("КолонкаПорядокЗаполнения", 		 "=Описание!R1C9:R1C9");
		Книга.Names.Add("КолонкаОсновнойПоиск", 			 "=Описание!R1C10:R1C10");
		Книга.Names.Add("КолонкаПредопределенныеЗначения", 	 "=Описание!R1C11:R1C11");
		Книга.Names.Add("КолонкаПолеОтбора", 				 "=Описание!R1C12:R1C12");
	КонецЕсли;
	
	ExcelПриложение.DisplayAlerts = False; 
	Книга.Worksheets(1).Activate(); 
	
	
	
	ИмяКаталога = Объект.ИмяКаталога;
	ИмяВременногоФайла = ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;
	Книга.SaveCopyAs(ИмяВременногоФайла);
	
	Попытка
		ExcelПриложение.Quit();
	Исключение
	КонецПопытки;
		
КонецПроцедуры



